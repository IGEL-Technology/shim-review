--- a/grub-core/fs/igelfs.c
+++ b/grub-core/fs/igelfs.c
@@ -186,7 +186,7 @@ void test_and_free(void* ptr){
 static grub_err_t
 grub_igelconfig_bootreg_to_minor_hints(unsigned char *buf, unsigned char **content)
 {
-  char sys_minor_hints[50], bspl_minor_hints[50];
+  char sys_minor_hints[50], bspl_minor_hints[50], old_sys_minor_hints[50];
   char *val = NULL;
   bootreg_data* bt_data = (bootreg_data*) grub_zalloc(sizeof(bootreg_data));
   bt_data->mode = BOOTREG_RDONLY;
@@ -197,6 +197,7 @@ grub_igelconfig_bootreg_to_minor_hints(u
   grub_dprintf("igelfs", "entering bootreg to minor_hints, bootreg_type at 0x%lx, bootreg_data at 0x%lx, ptr 0x%lx\n", (unsigned long)&bootreg_type, (unsigned long)(bt_data), (unsigned long)(&bt_data));
 
   grub_memset(sys_minor_hints, 0, sizeof(sys_minor_hints));
+  grub_memset(old_sys_minor_hints, 0, sizeof(old_sys_minor_hints));
   grub_memset(bspl_minor_hints, 0, sizeof(bspl_minor_hints));
 
   bootreg_type = bootreg_validate_header(bt_data);
@@ -213,6 +214,13 @@ grub_igelconfig_bootreg_to_minor_hints(u
     content_size += grub_strlen(sys_minor_hints);
     test_and_free(val);
   }
+  bootreg_get(bt_data, "old_sys_minor", &val);
+  if (val != NULL){
+    grub_snprintf(old_sys_minor_hints, sizeof(old_sys_minor_hints), "set old_sys_minor_hint=%s\n", val);
+    grub_env_set("old_sys_minor_hint", val);
+    content_size += grub_strlen(old_sys_minor_hints);
+    test_and_free(val);
+  }
   bootreg_get(bt_data, "bspl_minor", &val);
   if (val != NULL){
     grub_snprintf(bspl_minor_hints, sizeof(bspl_minor_hints), "set bspl_minor_hint=%s\n", val);
@@ -223,13 +231,13 @@ grub_igelconfig_bootreg_to_minor_hints(u
   if (content_size == 0)
     return 1;
 
-  *content = (unsigned char *) grub_zalloc (content_size + 2);
+  *content = (unsigned char *) grub_zalloc (content_size + 3);
 
   if (!content) {
     return 1;
   }
 
-  grub_snprintf((char *) *content, content_size, "%s%s", sys_minor_hints, bspl_minor_hints);
+  grub_snprintf((char *) *content, content_size, "%s%s%s", sys_minor_hints, bspl_minor_hints, old_sys_minor_hints);
 
   return 0;
 }
--- a/grub-core/partmap/igel.c
+++ b/grub-core/partmap/igel.c
@@ -62,7 +62,7 @@ grub_uint32_t bspl_minor = 0;
 /* function prototypes */
 
 int read_sect_partition_header(grub_uint32_t section, grub_disk_t disk, grub_uint64_t part_offset, struct igf_part_hdr *part_hdr, struct igf_sect_hdr *sect_hdr, struct partition_extents *ext_hdrs);
-int find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections);
+int find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections, grub_uint32_t sys_hint, grub_uint32_t old_sys_hint);
 static int check_chain_of_sections(grub_disk_t disk, grub_uint64_t part_offset, uint32_t part, grub_uint32_t first_sect, grub_uint32_t max_sections, grub_uint32_t *bad_chain);
 
 grub_err_t igelpart_disk_read (grub_disk_t disk, grub_uint64_t offset, grub_size_t size, void *buf)
@@ -377,7 +377,7 @@ check_chain_of_sections(grub_disk_t disk
 		    (sh.partition_minor != part) ||
 		    (sh.generation != version))
 		{
-			grub_printf("corrupt chain (inconsistent)\n");
+			grub_printf("\ncorrupt chain (inconsistent)\n");
 			*bad_chain = first_sect;
 			return 0;
 		}
@@ -671,13 +671,13 @@ check_sys_bspl_partition_header (grub_di
  */
 
 int
-find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections)
+find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections, grub_uint32_t sys_hint, grub_uint32_t old_sys_hint)
 {
 	grub_uint32_t sect;
 	grub_uint32_t first_sect = 0, first_minor = 0;
-	grub_uint32_t alternate_first_sect = 0, alternate_first_minor = 0;
-	grub_uint32_t bad_chain = 0;
-	grub_uint32_t sect_minor = 0;
+	grub_uint32_t alternate_first_sect = 0, alternate_first_minor = 0, hint_first_sect = 0, old_hint_first_sect = 0;
+	grub_uint32_t bad_chain = 0, bad_chains[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+	grub_uint32_t sect_minor = 0, i = 0;
 	int done = 0;
 	int number_of_bad_chains = 0;
 	unsigned int diff;
@@ -707,8 +707,39 @@ find_root_partition_secure(grub_disk_t d
 			/* setting sect_generation[0] = 0 disables the generation check in check_sys_bspl_partition_header */
 			sect_generation[0] = 0;
 			if (check_sys_bspl_partition_header(disk, part_offset, sect, sect_generation, &sect_minor, 1) == 1) {
+				for (i = 0; i < sizeof(bad_chains); i++)
+				{
+					if (bad_chains[i] == 0)
+						break;
+
+					if (sect == bad_chains[i]) {
+						bad_chain = sect;
+						break;
+					}
+				}
 				if (sect == bad_chain)
 					continue;
+
+				if (sys_hint != 0 && sect_minor == sys_hint) {
+					hint_first_sect = sect;
+					grub_printf("                   "
+					       "sys partition %d (sys hint)at section %lu  \r",
+					       sys_hint, (unsigned long) sect);
+					if (old_hint_first_sect != 0 || old_sys_hint == 0)
+						break;
+					continue;
+				}
+
+				if (old_sys_hint != 0 && sect_minor == old_sys_hint) {
+					old_hint_first_sect = sect;
+					grub_printf("                   "
+					       "sys partition %d (old sys hint)at section %lu  \r",
+					       old_sys_hint, (unsigned long) sect);
+					if (hint_first_sect != 0)
+						break;
+					continue;
+				}
+
 				/* version difference gives a hint about wrap arounds */
 				if (sect_generation[0] > version)
 					diff = sect_generation[0] - version;
@@ -750,6 +781,46 @@ find_root_partition_secure(grub_disk_t d
 			}
 		}
 		grub_printf("\n");
+
+		if (hint_first_sect) {
+			done = check_chain_of_sections(disk, part_offset, sys_hint, hint_first_sect, max_sections, &bad_chain);
+			if (done) {
+				found_secure_sys_sect = hint_first_sect;
+				sys_sect = hint_first_sect;
+				sys_minor = sys_hint;
+				return(0);
+			} else if (bad_chain != 0) {
+				for (i = 0; i < sizeof(bad_chains); i++)
+				{
+					if (bad_chains[i] == 0 || bad_chains[i] == bad_chain) {
+						bad_chains[i] = bad_chain;
+						break;
+					}
+				}
+			}
+		}
+
+		if (old_hint_first_sect) {
+			done = check_chain_of_sections(disk, part_offset, old_sys_hint, old_hint_first_sect, max_sections, &bad_chain);
+			if (done) {
+				found_secure_sys_sect = old_hint_first_sect;
+				sys_sect = old_hint_first_sect;
+				sys_minor = old_sys_hint;
+				return(0);
+			} else if (bad_chain != 0) {
+				for (i = 0; i < sizeof(bad_chains); i++)
+				{
+					if (bad_chains[i] == 0 || bad_chains[i] == bad_chain) {
+						bad_chains[i] = bad_chain;
+						break;
+					}
+				}
+			}
+		}
+
+		if (first_sect == 0 && hint_first_sect != 0)
+			continue;
+
 		if (version == 0)
 		{
 			grub_printf("No valid boot/system partition found\n\n");
@@ -762,6 +833,14 @@ find_root_partition_secure(grub_disk_t d
 			sys_sect = first_sect;
 			sys_minor = first_minor;
 			return(0);
+		} else if (bad_chain != 0) {
+			for (i = 0; i < sizeof(bad_chains); i++)
+			{
+				if (bad_chains[i] == 0 || bad_chains[i] == bad_chain) {
+					bad_chains[i] = bad_chain;
+					break;
+				}
+			}
 		}
 
 		grub_printf("\n");
@@ -800,7 +879,7 @@ iterate_real (grub_disk_t disk, const gr
   grub_uint64_t part_offset = partition->start << GRUB_DISK_SECTOR_BITS;
   int number_of_sections;
   int directory_present = 0, secure_boot = 0, sect_check = 0;
-  grub_int32_t i = 0;
+  grub_int32_t i = 0, sys_hint = 0, old_sys_hint = 0;
   const char *part_check;
   grub_uint8_t found = 0;
   const char *arg;
@@ -808,7 +887,7 @@ iterate_real (grub_disk_t disk, const gr
   static grub_uint32_t n_sects;
   grub_uint16_t generation[2] = {0, 0};
   char string[32];
-  const char *sys_minor_hint = NULL, *bspl_minor_hint = NULL;
+  const char *sys_minor_hint = NULL, *bspl_minor_hint = NULL, *old_sys_minor_hint = NULL;
   const char *sys_generation = NULL, *bspl_generation = NULL;
   grub_uint8_t sys_hint_found = 0, bspl_hint_found = 0;
 
@@ -890,6 +969,26 @@ iterate_real (grub_disk_t disk, const gr
 	  }
 	}
       }
+      if (sys_hint_found != 1) {
+        old_sys_minor_hint = grub_env_get ("old_sys_minor_hint");
+        if (old_sys_minor_hint) {
+          i = (int)grub_strtol(old_sys_minor_hint,NULL,10);
+          if (i > 0 && i < DIR_MAX_MINORS) {
+            section = find_partition_by_directory(&pdir, i, &n_sects);
+            if (section != end_section) {
+	      if (check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL, 0) == 1) {
+                sys_first_section = section;
+                n_sections = n_sects;
+                sys_minor = i;
+	        grub_snprintf(string, sizeof(string), "%u", sys_minor);
+                grub_env_set("sys_minor", string);
+	        sys_hint_found = 1;
+	        grub_dprintf("partition", "Found sys minor %u with hint (old sys minor hint)\n", sys_minor);
+	      }
+	    }
+	  }
+	}
+      }
       bspl_minor_hint = grub_env_get ("bspl_minor_hint");
       if (bspl_minor_hint) {
         i = (int)grub_strtol(bspl_minor_hint,NULL,10);
@@ -950,6 +1049,14 @@ iterate_real (grub_disk_t disk, const gr
 
   /* if section is still unknown use secure root find function */
   if (secure_boot != 0 || sys_first_section == end_section) {
+    sys_minor_hint = grub_env_get ("sys_minor_hint");
+    if (sys_minor_hint) {
+      sys_hint = (int)grub_strtol(sys_minor_hint,NULL,10);
+    }
+    old_sys_minor_hint = grub_env_get ("old_sys_minor_hint");
+    if (old_sys_minor_hint) {
+      old_sys_hint = (int)grub_strtol(old_sys_minor_hint,NULL,10);
+    }
     /* switch to console mode, so the grub_printf are displayed */
     arg = grub_strdup("console");
     args[0] = (char *)arg;
@@ -961,7 +1068,7 @@ iterate_real (grub_disk_t disk, const gr
     } else {
       grub_printf("Searching system partition (failsafe boot):\n");
     }
-    if (find_root_partition_secure(disk, part_offset, number_of_sections) == 0) {
+    if (find_root_partition_secure(disk, part_offset, number_of_sections, sys_hint, old_sys_hint) == 0) {
       sys_first_section = sys_sect;
       grub_snprintf(string, sizeof(string), "%u", sys_minor);
       grub_env_set("sys_minor", string);
