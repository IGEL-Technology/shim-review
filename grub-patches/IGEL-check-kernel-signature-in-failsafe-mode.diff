--- a/grub-core/partmap/igel.c
+++ b/grub-core/partmap/igel.c
@@ -28,6 +28,9 @@
 #include <grub/igel_partition.h>
 #include <grub/i18n.h>
 #include <grub/command.h>
+#include <grub/linux.h>
+#include <grub/efi/efi.h>
+#include <grub/efi/sb.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
@@ -41,6 +44,7 @@ static grub_uint32_t crc_32_tab[256];	/*
 static grub_uint32_t n_sections;
 static grub_uint32_t sys_sect;
 static grub_uint32_t found_secure_sys_sect = 0;
+static grub_uint32_t sys_minor_already_verified[10] = {0, 0, 0, 0, 0, 0, 0 , 0, 0, 0};
 static struct igf_sect_hdr sh;
 static const grub_uint64_t end_section = 0xffffffffffffffff >> ((8 - sizeof(sh.next_section)) * 8);
 
@@ -61,7 +65,6 @@ int read_sect_partition_header(grub_uint
 int find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections);
 static int check_chain_of_sections(grub_disk_t disk, grub_uint64_t part_offset, uint32_t part, grub_uint32_t first_sect, grub_uint32_t max_sections, grub_uint32_t *bad_chain);
 
-
 grub_err_t igelpart_disk_read (grub_disk_t disk, grub_uint64_t offset, grub_size_t size, void *buf)
 {
        grub_size_t len, read;
@@ -119,6 +122,51 @@ static grub_err_t igel_disk_write (grub_
 }
 #endif
 
+#define SHIM_VERIFY_GUID \
+  { 0x605dab50, 0xe046, 0x4300, {0xab, 0xb6, 0x3d, 0xd8, 0x10, 0xdd, 0x8b, 0x23} }
+
+struct grub_efi_shim_verify
+{
+  grub_efi_status_t (*verify) (void *buffer, grub_uint32_t size);
+};
+typedef struct grub_efi_shim_verify grub_efi_shim_verify_t;
+
+static grub_efi_boolean_t
+grub_secureboot_validate (void *data, grub_uint32_t size)
+{
+  grub_efi_guid_t guid = SHIM_VERIFY_GUID;
+  grub_efi_shim_verify_t *shim_lock;
+  grub_efi_status_t status;
+
+  if (grub_efi_get_secureboot () != GRUB_EFI_SECUREBOOT_MODE_ENABLED)
+    {
+      grub_dprintf ("partition", "secure boot not enabled, not validating");
+      return 1;
+    }
+
+  grub_dprintf ("partition", "Locating shim protocol\n");
+  shim_lock = grub_efi_locate_protocol(&guid, NULL);
+
+  if (!shim_lock)
+    {
+      grub_dprintf ("partition", "shim not available\n");
+      return 0;
+    }
+
+  grub_dprintf ("partition", "Asking shim to verify kernel signature\n");
+  status = shim_lock->verify(data, size);
+  if (status == GRUB_EFI_SUCCESS)
+    {
+      grub_dprintf ("partition", "Kernel signature verification passed\n");
+      return 1;
+    }
+
+  grub_dprintf ("partition", "Kernel signature verification failed (0x%lx)\n",
+		(unsigned long) status);
+  return 0;
+}
+
+
 /*****************************************************************************
  * CRC functions block
  *****************************************************************************/
@@ -398,7 +446,7 @@ check_chain_of_sections(grub_disk_t disk
  */
 
 static int
-check_sys_bspl_partition_header (grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t sect, grub_uint16_t *gen_array, grub_uint32_t *sect_minor)
+check_sys_bspl_partition_header (grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t sect, grub_uint16_t *gen_array, grub_uint32_t *sect_minor, int secure)
 {
 	struct igf_part_hdr part;
 	struct igf_sect_hdr sect_hdr;
@@ -407,11 +455,14 @@ check_sys_bspl_partition_header (grub_di
 	grub_uint32_t diff;
 	grub_uint16_t *generation = NULL;
 	int ret = 0;
+	unsigned int i = 0;
 	unsigned char *buffer = NULL;
 	grub_uint64_t offset = 0;
 	grub_uint32_t crc = 0;
+	grub_uint64_t kernel_offset = 0, kernel_length = 0;
 	/* crc offsets for section and directory header */
 	static const grub_uint32_t crc_sh_offset = (grub_uint32_t) ((grub_addr_t)&(sh.crc) - (grub_addr_t)&sh + sizeof(sh.crc));
+	grub_uint8_t efi_secureboot =  grub_efi_get_secureboot ();
 
 	if (sect_minor)
 		*sect_minor = 0;
@@ -451,6 +502,8 @@ check_sys_bspl_partition_header (grub_di
 			}
 			if (extents.extent[ext].type == EXTENT_TYPE_KERNEL) {
 				grub_dprintf("partition", "Found valid extent of type KERNEL\n");
+				kernel_offset = extents.extent[ext].offset;
+				kernel_length = extents.extent[ext].length;
 				generation = gen_array;
 				ret = 1;
 			} else if (ret != 1 && extents.extent[ext].type == EXTENT_TYPE_SPLASH) {
@@ -494,24 +547,113 @@ check_sys_bspl_partition_header (grub_di
 		grub_dprintf("partition", "RET: %d GENERATION: %u MINOR: %u SECT_GEN: %u diff: %u\n", ret, *generation, sect_hdr.partition_minor, sect_hdr.generation, diff);
 	}
 
-	/* check CRC of section 0 */
-	if (ret != 0) {
+	if (secure != 0 && ret == 1 && kernel_offset > 0 && kernel_length > 0) {
+		for (i=0; i<sizeof(sys_minor_already_verified); i++) {
+			if (sys_minor_already_verified[i] == 0)
+				break;
+			if (sys_minor_already_verified[i] == sect) {
+				kernel_length = 0;
+				break;
+			}
+		}
+	} else {
+		kernel_length = 0;
+	}
+
+	if (kernel_length > 0) {
+		struct igf_sect_hdr *section_hdr;
+		unsigned char *kernel = NULL;
+		grub_uint32_t section, lsect = 0;
+		grub_uint64_t length = kernel_length, igf_offset = 0;
+
 		if ((buffer = grub_malloc(IGF_SECTION_SIZE)) == NULL) {
 			grub_printf("\n\nError could not allocate %llu bytes of memory to do CRC check!\n", (unsigned long long) IGF_SECTION_SIZE);
 			return 0;
 		}
 
-		makecrc();	/* build the crc lookup table */
-		offset = part_offset + START_OF_SECTION(sect);
-		igelpart_disk_read (disk, offset, IGF_SECTION_SIZE, buffer);
-		updcrc(NULL, 0);
-		crc = updcrc(buffer + crc_sh_offset, IGF_SECTION_SIZE - crc_sh_offset);
-		if (crc != sect_hdr.crc)
-		{
-			grub_dprintf("partition", "CRC of section 0 of minor %u is invalid ignore this partition (calced: 0x%x should be: 0x%x).\n", sect_hdr.partition_minor, crc, sect_hdr.crc);
-			ret = 0;
+		if (efi_secureboot == GRUB_EFI_SECUREBOOT_MODE_ENABLED) {
+			if ((kernel = grub_malloc(kernel_length)) == NULL) {
+				grub_printf("\n\nError could not allocate %llu bytes of memory to do kernel check!\n", (unsigned long long) IGF_SECTION_SIZE);
+				return 0;
+			}
+		} else {
+			kernel = NULL;
+		}
+
+		makecrc();
+		section = sect;
+		section_hdr = (struct igf_sect_hdr *) buffer;
+		while (length > 0 && lsect < 1024) {
+			if (section == end_section) {
+				grub_dprintf("partition", "Could not read kernel extent abort here.\n");
+				ret = 0;
+				break;
+			}
+			offset = part_offset + START_OF_SECTION(section);
+			if (igelpart_disk_read (disk, offset, IGF_SECTION_SIZE, buffer)) {
+				grub_dprintf("partition", "Could not read kernel extent abort here (read error).\n");
+				ret = 0;
+				break;
+			}
+			section = section_hdr->next_section;
+			lsect++;
+
+			if (efi_secureboot == GRUB_EFI_SECUREBOOT_MODE_ENABLED && kernel != NULL) {
+				if (length == kernel_length && kernel_offset < igf_offset + IGF_SECT_DATA_LEN && kernel_offset >= igf_offset) {
+					grub_memcpy(kernel, buffer + IGF_SECT_HDR_LEN + kernel_offset - igf_offset, IGF_SECT_DATA_LEN - (kernel_offset - igf_offset));
+				} else if (length >= IGF_SECT_DATA_LEN) {
+					grub_memcpy(kernel + kernel_length - length, buffer + IGF_SECT_HDR_LEN, IGF_SECT_DATA_LEN);
+				} else if (length < IGF_SECT_DATA_LEN) {
+					grub_memcpy(kernel + kernel_length - length, buffer + IGF_SECT_HDR_LEN, length);
+				}
+			} else {
+				updcrc(NULL, 0);
+				crc = updcrc(buffer + crc_sh_offset, IGF_SECTION_SIZE - crc_sh_offset);
+				if (crc != section_hdr->crc)
+				{
+					grub_dprintf("partition", "CRC of section %u of minor %u is invalid ignore this partition (calced: 0x%x should be: 0x%x).\n", (unsigned) lsect, section_hdr->partition_minor, crc, section_hdr->crc);
+					ret = 0;
+					break;
+				}
+			}
+
+			if (length == kernel_length && kernel_offset < igf_offset + IGF_SECT_DATA_LEN && kernel_offset >= igf_offset) {
+				length -= IGF_SECT_DATA_LEN - (kernel_offset - igf_offset);
+			} else if (length >= IGF_SECT_DATA_LEN) {
+				length -= IGF_SECT_DATA_LEN;
+			} else if (length < IGF_SECT_DATA_LEN) {
+				length = 0;
+			}
 		}
+
 		grub_free(buffer);
+
+		if (efi_secureboot == GRUB_EFI_SECUREBOOT_MODE_ENABLED && kernel != NULL) {
+			if (ret == 1 && length == 0) {
+				if (! grub_secureboot_validate ((void *)kernel, (grub_uint32_t) kernel_length)) {
+					grub_printf("\nKernel secure boot validation failed (sys start section %lu)\n", (unsigned long) sect);
+					ret = 0;
+				} else {
+
+				}
+			} else {
+				ret = 0;
+			}
+		}
+
+		if (ret != 0) {
+			for (i=0; i<sizeof(sys_minor_already_verified); i++) {
+				if (sys_minor_already_verified[i] == 0) {
+					sys_minor_already_verified[i] = sect;
+					break;
+				}
+			}
+		}
+
+		if (kernel != NULL) {
+			grub_free(kernel);
+			kernel = NULL;
+		}
 	}
 
 	return ret;
@@ -545,7 +687,7 @@ find_root_partition_secure(grub_disk_t d
 	 * if present and valid */
 
 	if (found_secure_sys_sect != 0) {
-        	if (check_sys_bspl_partition_header (disk, part_offset, found_secure_sys_sect, NULL, &sect_minor) == 1) {
+        	if (check_sys_bspl_partition_header (disk, part_offset, found_secure_sys_sect, NULL, &sect_minor, 1) == 1) {
 			sys_sect = found_secure_sys_sect;
 			sys_minor = sect_minor;
 			return 0;
@@ -564,7 +706,7 @@ find_root_partition_secure(grub_disk_t d
 
 			/* setting sect_generation[0] = 0 disables the generation check in check_sys_bspl_partition_header */
 			sect_generation[0] = 0;
-			if (check_sys_bspl_partition_header(disk, part_offset, sect, sect_generation, &sect_minor) == 1) {
+			if (check_sys_bspl_partition_header(disk, part_offset, sect, sect_generation, &sect_minor, 1) == 1) {
 				if (sect == bad_chain)
 					continue;
 				/* version difference gives a hint about wrap arounds */
@@ -736,7 +878,7 @@ iterate_real (grub_disk_t disk, const gr
         if (i > 0 && i < DIR_MAX_MINORS) {
           section = find_partition_by_directory(&pdir, i, &n_sects);
           if (section != end_section) {
-	    if (check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL) == 1) {
+	    if (check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL, 0) == 1) {
               sys_first_section = section;
               n_sections = n_sects;
               sys_minor = i;
@@ -754,7 +896,7 @@ iterate_real (grub_disk_t disk, const gr
         if (i > 0 && i < DIR_MAX_MINORS) {
           section = find_partition_by_directory(&pdir, i, &n_sects);
           if (section != end_section) {
-	    if (check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL) == 2) {
+	    if (check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL, 0) == 2) {
 	      bspl_first_section = section;
 	      bspl_minor = i;
 	      grub_snprintf(string, sizeof(string), "%u", bspl_minor);
@@ -770,7 +912,7 @@ iterate_real (grub_disk_t disk, const gr
         if (section == end_section)
 	  continue;
 	if (sys_hint_found == 0 || bspl_hint_found == 0) {
-	  sect_check = check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL);
+	  sect_check = check_sys_bspl_partition_header (disk, part_offset, section, generation, NULL, 0);
           if (sect_check == 1 && sys_hint_found == 0) {
             sys_first_section = section;
             n_sections = n_sects;
