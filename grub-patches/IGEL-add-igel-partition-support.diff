--- /dev/null
+++ b/grub-core/partmap/directory.c
@@ -0,0 +1,129 @@
+#include <grub/igel_partition.h>
+
+/* define offsetof explicit */
+#ifndef offsetof
+#define offsetof(st, m) __builtin_offsetof(st, m)
+#endif /*offsetof*/
+
+/*
+ *  Given a partition number minor and a logical section number i,
+ *  determine the corresponding pysical section number
+ *  by walking through the partition's fragment list.
+ *
+ *  Negative return values indicate error conditions.
+ */
+grub_uint32_t get_physical_section(struct directory *dir, grub_uint32_t minor, grub_uint32_t i)
+{
+    struct partition_descriptor *part;
+    struct fragment_descriptor *frag;
+    grub_size_t j;
+    grub_uint16_t n_frag;
+    int n;
+
+    if (minor >= IGF_MAX_MINORS)
+        return 0xffffffff; /* invalid minor */
+    if (minor >= DIR_MAX_MINORS)
+	return 0xffffffff;
+    part = &(dir->partition[minor]);
+    if (part->minor != minor)
+	return 0xffffffff; /* minors don't match */
+    if ((n_frag = part->n_fragments) == 0)
+        return 0xffffffff; /* partition does not exist or is empty */
+    frag = &(dir->fragment[part->first_fragment]);
+
+    /* find the fragment to which section i belongs */
+    n = 1;                 /* # of fragments examined */
+    j = 0;                 /* # of sections contained in previous fragments */
+    while (i > j + frag->length - 1)
+    {
+        n++;
+        if (n > n_frag)
+            return 0xffffffff;    /* section number i exceeds partition length */
+        j += frag->length;
+        frag++;            /* next fragment */
+    }
+    return frag->first_section + i - j;
+}
+
+/*
+ *  Given a physical section number, determine the partition number
+ *  to which this section belongs (freelist = 0). If the section
+ *  doesn't belong to any partition, even not to the freelist,
+ *  the directory is in an inconsistent state. Return -1 in that case.
+ *
+ *  This function is only needed for the kernel driver
+ *  ioctl IGFLASH_ERASE_SECTION.
+ */
+int get_partition_from_section(struct directory *dir, grub_uint32_t sect)
+{
+	struct partition_descriptor *part;
+	struct fragment_descriptor *frag;
+	grub_uint32_t minor;
+	grub_uint16_t n_frag;
+	int i;
+	grub_uint32_t first_sect;
+
+	
+	for (minor = 0; minor < DIR_MAX_MINORS; minor++)
+	{
+		part = &(dir->partition[minor]);
+		if ((n_frag = part->n_fragments) == 0)
+			continue; /* partition does not exist */
+		for (i=0; i<n_frag; i++)
+		{
+			frag = &(dir->fragment[part->first_fragment+i]);
+			first_sect = frag->first_section;
+			if (sect < first_sect)
+				break;
+			else if (sect < first_sect + frag->length)
+				return minor;
+		}
+	}
+	return -1; /* section doesn't belong to any partition */
+}
+
+/*
+ *  This functions locates and reads a valid directory block from
+ *  section #0 into a caller provided buffer.
+ *  A directory is valid, if it contains a proper magic value and
+ *  if it passes the crc check. There are no consistency checks !
+ *
+ *  Return value is 1 when a valid directory was found, 0, if none
+ *  could be found.
+ *
+ */
+
+int read_directory(struct directory *dir, grub_disk_t disk, grub_uint64_t part_offset)
+{
+    grub_uint64_t offset;
+    grub_uint32_t crc;
+
+    /* crc offsets for directory header */
+    static const grub_uint32_t crc_dir_offset = (offsetof(struct directory, crc) + sizeof (((struct directory*)0)->crc));
+
+    makecrc(); /* crc initial table setup */
+
+    offset = DIR_OFFSET;
+
+    offset += part_offset;
+    igelpart_disk_read (disk, offset, sizeof (struct directory), dir);
+
+    if (dir->magic != DIRECTORY_MAGIC)
+        return 0;
+    /*
+     * calculate the checksum of the whole directory structure
+     * except the first 8 bytes (magic and crc)
+     */
+
+    (void) updcrc(NULL, 0); /* reset crc calculation state */
+    crc = updcrc((uint8_t *)dir + crc_dir_offset, sizeof(struct directory) - crc_dir_offset);
+
+    if (crc == dir->crc)
+    {
+        return 1;
+    }
+
+    return 0;
+}
+
+
--- /dev/null
+++ b/grub-core/partmap/igel.c
@@ -0,0 +1,829 @@
+/* igel.c - Read IGEL style partition tables.  */
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2002,2004,2005,2006,2007,2008,2009  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/partition.h>
+#include <grub/disk.h>
+#include <grub/mm.h>
+#include <grub/misc.h>
+#include <grub/env.h>
+#include <grub/dl.h>
+#include <grub/msdos_partition.h>
+#include <grub/gpt_partition.h>
+#include <grub/igel_partition.h>
+#include <grub/i18n.h>
+#include <grub/command.h>
+
+GRUB_MOD_LICENSE ("GPLv3+");
+
+#ifdef GRUB_UTIL
+#include <grub/emu/misc.h>
+#endif
+
+static struct grub_partition_map grub_igel_partition_map;
+
+static grub_uint32_t crc_32_tab[256];	/* crc table, defined below */
+static grub_uint32_t n_sections;
+static grub_uint32_t sys_sect;
+static grub_uint32_t found_secure_sys_sect = 0;
+static struct igf_sect_hdr sh;
+static const grub_uint64_t end_section = 0xffffffffffffffff >> ((8 - sizeof(sh.next_section)) * 8);
+
+/* Used in fs/igelfs.c to find first section of the IGEL sys partition */
+grub_uint32_t sys_first_section = 0xffffffffffffffff >> ((8 - sizeof(sh.next_section)) * 8);
+/* Used in fs/igelfs.c to find first section of the IGEL bootsplash partition */
+grub_uint32_t bspl_first_section = 0xffffffffffffffff >> ((8 - sizeof(sh.next_section)) * 8);
+/* Used in fs/igelfs.c to find first section of the IGEL custom bootsplash partition */
+grub_uint32_t cbspl_first_section = 0xffffffffffffffff >> ((8 - sizeof(sh.next_section)) * 8);
+
+/* function prototypes */
+
+int read_partition_header(grub_uint32_t section, grub_disk_t disk, grub_uint64_t part_offset, struct igf_part_hdr *partition);
+int find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections);
+static int check_chain_of_sections(grub_disk_t disk, grub_uint64_t part_offset, uint32_t part, grub_uint32_t first_sect, grub_uint32_t max_sections, grub_uint32_t *bad_chain);
+
+
+grub_err_t igelpart_disk_read (grub_disk_t disk, grub_uint64_t offset, grub_size_t size, void *buf)
+{
+       grub_size_t len, read;
+       grub_err_t ret = 0;
+       grub_uint8_t *buffer;
+       grub_partition_t part = NULL;
+
+       /* Need to access the whole disk (IGEL DOS partition) */
+       /* Therefore we null out the partition infos here from the given disk. */
+       /* Otherwise the grub_disk_read() function might detect an access beyond the end of the device, */
+       /* if the IGEL system partition is fragmented across the IGELs DOS partition. */
+       if(disk->partition) {
+             offset += disk->partition->start << GRUB_DISK_SECTOR_BITS; /* Convert the offset to be disk-relative */
+             part = disk->partition; /* Save the current partition info */
+             disk->partition = NULL; /* Clear the disks partition info temporarily */
+       }
+
+       buffer = (grub_uint8_t *)buf;
+       read = 0;
+       len = size & ~(((grub_size_t)1<<GRUB_DISK_SECTOR_BITS)-1);
+       if (len > 0) {
+           /* it is ridiculus but efidisk seems to have problems if one reads bigger blocks as 32k */
+           while (read < len)
+           {
+               if (len - read > 0x8000) {
+                   ret = grub_disk_read (disk, (offset + read) >> GRUB_DISK_SECTOR_BITS, (offset + read) & ((1<<GRUB_DISK_SECTOR_BITS)-1), 0x8000, &buffer[read]);
+                   read += 0x8000;
+               } else {
+                   ret = grub_disk_read (disk, (offset + read) >> GRUB_DISK_SECTOR_BITS, (offset + read) & ((1<<GRUB_DISK_SECTOR_BITS)-1), len - read, &buffer[read]);
+                   read += len - read;
+               }
+               if (ret < 0) {
+                   disk->partition = part; /* Restore the partition info */
+                   return ret;
+               }
+           }
+       }
+
+       if (len < size) {
+           offset += len;
+           len = size - len;
+           ret = grub_disk_read (disk, offset >> GRUB_DISK_SECTOR_BITS, offset & ((1<<GRUB_DISK_SECTOR_BITS)-1), len, &buffer[read]);
+       }
+
+       disk->partition = part; /* Restore the partition info */
+
+       return ret;
+}
+
+static grub_err_t igel_disk_write (grub_disk_t disk, grub_uint64_t offset, grub_size_t size, void *buf)
+{
+	return  grub_disk_write (disk, offset >> GRUB_DISK_SECTOR_BITS, offset & (((grub_size_t)1<<GRUB_DISK_SECTOR_BITS)-1), size, buf);
+}
+
+
+/*****************************************************************************
+ * CRC functions block
+ *****************************************************************************/
+
+/*
+ * Run a set of bytes through the crc shift register.  If s is a NULL
+ * pointer, then initialize the crc shift register contents instead.
+ * Return the current crc in either case.
+ *
+ * s:	pointer to bytes to pump through
+ * n:   number of bytes in s[]
+ */
+grub_uint32_t updcrc(unsigned char *s, unsigned int n)
+{
+	register grub_uint32_t c;			/* temporary variable      */
+	static grub_uint32_t crc = (grub_uint32_t) 0xffffffffL;	/* shift register contents */
+
+	if (s == NULL) {
+		c = 0xffffffffL;
+	} else {
+		c = crc;
+		while (n--) {
+			c = crc_32_tab[((int) c ^ (*s++)) & 0xff] ^ (c >> 8);
+		}
+	}
+	crc = c;
+	return c ^ 0xffffffffL;	   /* (instead of ~c for 64-bit machines) */
+}
+
+
+/*
+ * Initial table setup
+ * Not copyrighted 1990 Mark Adler
+ */
+void makecrc(void)
+{
+	grub_uint32_t c;	/* crc shift register */
+	grub_uint32_t e;	/* polynomial exclusive-or pattern */
+	unsigned int i;		/* counter for all possible eight bit values */
+	int k;		/* byte being shifted into crc apparatus */
+
+	/* terms of polynomial defining this crc (except x^32): */
+	static int p[] =
+		{0, 1, 2, 4, 5, 7, 8, 10, 11, 12, 16, 22, 23, 26};
+
+	/* Make exclusive-or pattern from polynomial */
+	e = 0;
+	for (i = 0; i < sizeof(p) / sizeof(int); i++)
+		e |= 1L << (31 - p[i]);
+
+	crc_32_tab[0] = 0;
+
+	for (i = 1; i < 256; i++) {
+		c = 0;
+		for (k = i | 256; k != 1; k >>= 1) {
+			c = c & 1 ? (c >> 1) ^ e : c >> 1;
+			if (k & 1)
+				c ^= e;
+		}
+		crc_32_tab[i] = c;
+	}
+}
+
+/*****************************************************************************
+ * end CRC functions block
+ *****************************************************************************/
+
+/*
+ * find_root_partition_by_directory
+ *
+ * Find a partition with minor number 1 and the highest version number.
+ * (A parition is a linked list of sections with valid CRC checksums.)
+ *
+ * Method: Check whether a valid directory exists and whether it contains
+ *         a partition #1. The directory contains everything needed to
+ *         access the partition's payload. The consistency of the
+ *         partition data is not checked.
+ */
+
+static int find_root_partition_by_directory(struct directory *dir1)
+{
+  int i;
+  struct partition_descriptor *p;
+  p = &(dir1->partition[1]);
+
+  if (p->n_fragments <= 0)
+  {
+    /* no root partition - this should never happen */
+    grub_dprintf("partition", "The directory doesn't contain a root partition !\n");
+    return(-1);
+  }
+
+  /*
+   * Calculate the length of partition #1 in sections.
+   * This information is not explicitly contained in the directory.
+   */
+
+  n_sections = 0;
+  for (i=p->first_fragment; i<p->first_fragment+p->n_fragments; i++)
+    n_sections += dir1->fragment[i].length;
+
+  return(0);
+}
+
+/*----------------------------------------------------------------------
+ *  Local data
+ */
+
+/*
+ * Read the header of the partition that has been located
+ * by find_root_partition_xxx() before.
+ */
+
+int
+read_partition_header(grub_uint32_t section, grub_disk_t disk, grub_uint64_t part_offset, struct igf_part_hdr *partition)
+{
+    grub_uint64_t offset;
+
+    offset = part_offset + START_OF_SECTION(section) + IGF_SECT_HDR_LEN;
+    igelpart_disk_read (disk, offset, sizeof(struct igf_part_hdr), partition);
+    if (partition->type != PTYPE_IGEL_COMPRESSED
+    && partition->type != PTYPE_IGEL_RAW
+    && partition->type != PTYPE_IGEL_RAW_RO)
+    {
+	grub_dprintf("partition", "The root/system partition is not of type compressed, raw or raw_ro !\n");
+	return 1;
+    }
+
+    grub_dprintf("partition", "igf_part_hdr: type 0x%x, hdrlen 0x%x, partlen 0x%llx, n_blocks 0x%llx\n"
+                 , partition->type, partition->hdrlen, (unsigned long long)partition->partlen, (unsigned long long)partition->n_blocks);
+    grub_dprintf("partition", "igf_part_hdr: n_extents 0x%x, offset_blocktable 0x%llx, offset_blocks 0x%llx\n"
+                 , partition->n_extents, (unsigned long long)partition->offset_blocktable, (unsigned long long)partition->offset_blocks);
+    grub_dprintf("partition", "igf_part_hdr: n_clusters 0x%x, cluster_shift 0x%x\n"
+                 , partition->n_clusters, partition->cluster_shift);
+
+    return 0;
+}
+
+/*
+ * Follow a chain of sections and check their CRC checksums
+ *
+ * This is a helper function for find_root_partition_secure().
+ * Return values: 1=chain ok, 0=chain not ok
+ */
+
+static int
+check_chain_of_sections(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t part, grub_uint32_t first_sect, grub_uint32_t max_sections, grub_uint32_t *bad_chain)
+{
+	grub_uint32_t i;
+	grub_uint32_t sect, old_sect;
+	grub_uint16_t version;
+	grub_uint32_t crc, header_crc;
+	grub_uint64_t from;
+	grub_uint32_t section_in_minor;
+	struct igf_sect_hdr *shp;
+	unsigned char *buffer = NULL;
+
+	/* crc offsets for section and directory header */
+	static const grub_uint32_t crc_sh_offset = (grub_uint32_t) ((grub_addr_t)&(sh.crc) - (grub_addr_t)&sh + sizeof(sh.crc));
+
+	/* Modulo for section in minor */
+
+	static const grub_uint64_t mod_sect_in_minor = (grub_uint64_t) 1UL << (sizeof(sh.section_in_minor) * 8);
+
+	igelpart_disk_read (disk, part_offset + START_OF_SECTION(first_sect), sizeof(struct igf_sect_hdr), &sh);
+	version = sh.generation;
+	section_in_minor = sh.section_in_minor;
+	n_sections = 1;
+	grub_printf("CRC check partition %d generation %d: ", part, version);
+
+	sys_sect = first_sect;
+
+	while ((sect = sh.next_section) != end_section)
+	{
+		if ((sect == end_section) || (sect >= max_sections))
+		{
+			grub_printf("corrupt chain (bad link)\n");
+			*bad_chain = first_sect;
+			return 0;
+		}
+		/* Read next section header */
+		igelpart_disk_read (disk, part_offset + START_OF_SECTION(sect), sizeof(struct igf_sect_hdr), &sh);
+		if ((sh.section_in_minor != n_sections % mod_sect_in_minor) ||
+		    (n_sections % mod_sect_in_minor == 0 && n_sections >= mod_sect_in_minor &&
+		    section_in_minor != mod_sect_in_minor - 1) ||
+		    (sh.partition_minor != part) ||
+		    (sh.generation != version))
+		{
+			grub_printf("corrupt chain (inconsistent)\n");
+			*bad_chain = first_sect;
+			return 0;
+		}
+
+		section_in_minor = sh.section_in_minor;
+		n_sections++;
+
+		if (n_sections >= max_sections)
+		{
+			grub_printf("chain too long (cyclic ?)\n");
+			*bad_chain = first_sect;
+			return 0;
+		}
+	}
+
+	if ((buffer = grub_malloc(IGF_SECTION_SIZE)) == NULL) {
+		grub_printf("\n\nError could not allocate %llu bytes of memory to do CRC check!\n", (unsigned long long) IGF_SECTION_SIZE);
+		return 0;
+	}
+
+	/*
+	 * We have found a complete sequence of sections.
+	 * Test the crc checksum of each one.
+	 */
+	makecrc();	/* build the crc lookup table */
+	sect = first_sect;
+	old_sect = sect;
+	for (i=0; i<n_sections; i++)
+	{
+		if (n_sections > 10) {
+			if (i % (n_sections / 10) == 0)
+				grub_printf(".");
+		} else {
+			grub_printf(".");
+		}
+		updcrc(NULL, 0);
+		from = START_OF_SECTION(sect);
+		igelpart_disk_read (disk, part_offset + from, IGF_SECTION_SIZE, buffer);
+		shp =  (struct igf_sect_hdr *)buffer;
+		header_crc = shp->crc;
+		sect = shp->next_section;
+		/* skip the crc_sh_offset (offset is calculated to match section header structure) */
+		crc = updcrc(buffer + crc_sh_offset, IGF_SECTION_SIZE - crc_sh_offset);
+		if (crc != header_crc)
+		{
+			grub_printf("crc error, bad section %d crc=%x, should be %x\n",
+			        old_sect, crc, header_crc);
+			*bad_chain = first_sect;
+			grub_free(buffer);
+			return 0;
+		}
+		old_sect = sect;
+	}
+	grub_free(buffer);
+
+	grub_printf(" ok\n");
+	return 1;	/* chain is ok */
+}
+
+/* function checks sys partition header for errors and return 0 if error was detected and 1 if not */
+
+static int
+check_sys_partition_header (grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t sect)
+{
+	struct igf_part_hdr part;
+	struct igf_partition_extent extent;
+	grub_uint8_t ext;
+	int ret = 0;
+
+
+	if (read_partition_header(sect, disk, part_offset, &part) != 0) {
+		grub_dprintf("partition", "read_partition_header failed for sys partition\n");
+		return 0;
+	}
+
+	if (part.type != PTYPE_IGEL_COMPRESSED
+        && part.type != PTYPE_IGEL_RAW
+        && part.type != PTYPE_IGEL_RAW_RO) {
+		grub_dprintf("partition", "wrong partition type 0x%lu for a system partition\n", (unsigned long) part.type);
+		return 0;
+	}
+
+	if (part.n_extents != 0) {
+		for (ext=0;ext<part.n_extents;ext++) {
+			igelpart_disk_read (disk,
+					part_offset + START_OF_SECTION(sect) + IGF_SECT_HDR_LEN
+					+ sizeof(struct igf_part_hdr) + ext * sizeof(struct igf_partition_extent),
+					sizeof(struct igf_partition_extent), &extent);
+			if (extent.type == EXTENT_TYPE_KERNEL
+			|| extent.type == EXTENT_TYPE_RAMDISK
+			|| extent.type == EXTENT_TYPE_SPLASH) {
+				if (extent.offset >= part.offset_blocktable) {
+					grub_dprintf("partition", "Error: offset of extent collides with offset_blocktable -> extents header invalid\n");
+					ret = 0;
+					break;
+				}
+			}
+			if (extent.type == EXTENT_TYPE_KERNEL) {
+				grub_dprintf("partition", "Found valid extent of type KERNEL\n");
+				ret = 1;
+			}
+		}
+	}
+
+	return ret;
+}
+
+/*
+ * find_root_partition_secure
+ *
+ * Find a partition with minor number 1 and the highest version number.
+ * (A partition is a linked list of sections with valid CRC checksums.)
+ *
+ * Method: Look at the section headers and find a complete chain
+ *         belonging to partition #1 with the highest version number.
+ *         Then test the crc checksum of each section.
+ */
+
+int
+find_root_partition_secure(grub_disk_t disk, grub_uint64_t part_offset, grub_uint32_t max_sections)
+{
+	grub_uint32_t sect;
+	grub_uint32_t first_sect = 0;
+	grub_uint32_t invalidate_sect = 0;
+	grub_uint32_t alternate_first_sect = 0;
+	grub_uint32_t bad_chain = 0;
+	int done = 0;
+	int number_of_bad_chains = 0;
+	unsigned int diff;
+	grub_uint16_t version;
+
+	/* prevent grub2 to do the search and CRC check several times, use found_secure_sys_sect
+	 * if present and valid */
+
+	if (found_secure_sys_sect != 0) {
+        	if (check_sys_partition_header (disk, part_offset, found_secure_sys_sect) != 0) {
+			sys_sect = found_secure_sys_sect;
+			return 0;
+		}
+		found_secure_sys_sect = 0;
+	}
+
+	while (!done)
+	{
+		version = 0;
+		for (sect=1; sect<(grub_uint32_t)max_sections; sect++)
+		{
+			if ((sect & 0xf) == 0)
+				grub_printf("%d/%d (%d%%) \r",
+				       sect, max_sections, (sect + 16) * 100 / max_sections);
+
+			igelpart_disk_read (disk, part_offset + START_OF_SECTION(sect), sizeof(struct igf_sect_hdr), &sh);
+			if ((sh.partition_minor == 1) && (sh.section_in_minor == 0))
+			{
+				if (sect == bad_chain)
+					continue;
+				/* version difference gives a hint about wrap arounds */
+				if (sh.generation > version)
+					diff = sh.generation - version;
+				else
+					diff = version - sh.generation;
+
+				if (diff >= 65534)
+				{
+					/*
+					 * if diff is large and version is 1,
+					 * the version is wraped around and
+					 * we have stored 1 already
+					 */
+					if (version == 1)
+						continue;
+					/* a wrap around too, but the 1 has to be stored */
+					if (sh.generation == 1)
+					{
+						version = sh.generation;
+						alternate_first_sect = first_sect;
+						first_sect = sect;
+						continue;
+					}
+				}
+				/* the default case */
+				if (sh.generation > version)
+				{
+					if (check_sys_partition_header(disk, part_offset, sect) == 0) {
+						invalidate_sect = sect;
+					} else {
+						version = sh.generation;
+						alternate_first_sect = first_sect;
+						first_sect = sect;
+						grub_printf("                   "
+						       "partition 1 generation %d at section %lu  \r",
+						       version, (unsigned long) first_sect);
+					}
+				}
+			}
+		}
+		grub_printf("\n");
+		if (version == 0)
+		{
+			grub_printf("No valid boot/system partition found\n\n");
+			return(1);
+		}
+
+		/* invalidate sys partition if partition header is corrupted and there is a other sys partition present */
+
+		if (invalidate_sect != 0 && first_sect != 0) {
+			igelpart_disk_read (disk, part_offset + START_OF_SECTION(invalidate_sect), sizeof(struct igf_sect_hdr), &sh);
+			sh.generation = 0;
+			igel_disk_write (disk, part_offset + START_OF_SECTION(invalidate_sect), sizeof(struct igf_sect_hdr), &sh);
+		}
+
+		done = check_chain_of_sections(disk, part_offset, 1, first_sect, max_sections, &bad_chain);
+		if (done) {
+			found_secure_sys_sect = sys_sect;
+			return(0);
+		}
+
+		grub_printf("\n");
+		number_of_bad_chains++;
+		if (number_of_bad_chains > 1)
+		{
+			grub_printf("Found %d bad chains: giving up\n",
+			       number_of_bad_chains);
+			return(1);
+		}
+		if (alternate_first_sect > 0) {
+			done = check_chain_of_sections(disk, part_offset, 1, alternate_first_sect,
+			                               max_sections, &bad_chain);
+			if (done) {
+				found_secure_sys_sect = sys_sect;
+				return(0);
+			} else
+				return(1);
+		}
+	}
+	return(0);
+}
+
+static grub_err_t
+iterate_real (grub_disk_t disk, const grub_partition_t partition,
+	      struct grub_partition_map *pmap,
+	      grub_partition_iterate_hook_t hook, void *hook_data)
+{
+  grub_uint32_t pdir_magic;
+  grub_uint64_t bootreg_magic;
+  struct igf_part_hdr php;
+  struct directory pdir;
+  struct grub_partition p;
+  grub_uint32_t section;
+  grub_uint64_t part_offset = partition->start << GRUB_DISK_SECTOR_BITS;
+  int number_of_sections;
+  int directory_present = 0, secure_boot = 0;
+  grub_int32_t i = 0;
+  const char *part_check;
+  grub_uint8_t found = 0;
+  const char *arg;
+  char *args[1];
+
+  /* Read the possible IGEL labels (PDIR and BOOTREG).  */
+  if (found == 0) {
+    if (igelpart_disk_read (disk, part_offset + IGEL_BOOTREG_OFFSET, sizeof(grub_uint64_t), &bootreg_magic))
+      return grub_errno;
+
+    if (bootreg_magic == grub_cpu_to_le64 (IGEL_BOOTREG_MAGIC)) {
+      grub_dprintf("partition", "Found IGEL bootreg magic on offset 0x%llx\n", (unsigned long long) IGEL_BOOTREG_OFFSET);
+      found = 1;
+    }
+  }
+
+  if (found == 0) {
+    if (igelpart_disk_read (disk, part_offset + DIR_OFFSET, sizeof(grub_uint32_t), &pdir_magic))
+      return grub_errno;
+
+    if (pdir_magic == grub_cpu_to_le32 (DIRECTORY_MAGIC)) {
+      grub_dprintf("partition", "Found IGEL directory magic on offset 0x%llx\n", (unsigned long long) DIR_OFFSET);
+      found = 1;
+    }
+  }
+
+  /* Check if it is valid.  */
+  if (found == 0) {
+    grub_dprintf("partition", "no IGEL signature found\n");
+    return grub_error (GRUB_ERR_BAD_PART_TABLE, "no IGEL signature");
+  }
+
+  section = end_section;
+
+  /* if igel_part_check is set to true do not use directory */
+
+  part_check = grub_env_get ("igel_part_check");
+
+  if (part_check) {
+    if (grub_strcmp (part_check, "true") == 0) {
+      secure_boot = 1;
+      grub_dprintf("partition", "Using find_root_partition_secure and ignoring IGEL partition directory\n");
+    }
+  }
+
+  if (secure_boot == 0) {
+    /* check directory */
+    if (read_directory(&pdir, disk, part_offset) > 0) {
+      directory_present = 1;
+      grub_dprintf("partition", "read_directory succeded\n");
+      if (find_root_partition_by_directory(&pdir) == 0) {
+        section = get_physical_section(&pdir, 1, 0);
+	/* check if partition header is valid, if not set section = -1 */
+        if (check_sys_partition_header (disk, part_offset, section) == 0)
+          section = end_section;
+      } else {
+        grub_dprintf("partition", "find_root_partition_section failed\n");
+      }
+    }
+  }
+
+  /* if section is still unknown use secure root find function */
+  if (section == end_section) {
+    /* switch to console mode, so the grub_printf are displayed */
+    arg = grub_strdup("console");
+    args[0] = (char *)arg;
+    grub_command_execute ("terminal_output", 1, args);
+
+    number_of_sections = (partition->len << GRUB_DISK_SECTOR_BITS) >> IGF_SECTION_SHIFT; /* number of IGEL sections */
+    if (secure_boot == 0) {
+      grub_printf("Searching system partition (partition directory not found or invalid):\n");
+    } else {
+      grub_printf("Searching system partition (failsafe boot):\n");
+    }
+    if (find_root_partition_secure(disk, part_offset, number_of_sections) == 0)
+      section = sys_sect;
+  }
+
+  grub_dprintf("partition", "section with root partition 0x%x\n", section);
+
+  if (section == end_section) {
+    grub_command_execute ("clear", 0, NULL);
+    grub_printf("Couldn't find valid IGEL partition. Please contact our support (service area on www.igel.com) to recover the system.");
+    arg = grub_strdup("360");
+    args[0] = (char *)arg;
+    while (1) {
+    	grub_command_execute ("sleep", 1, args);
+    }
+    /* never reached */
+    return grub_errno;
+  }
+
+  sys_first_section = section; /* Used in fs/igelfs.c */
+
+  grub_dprintf("partition", "start reading partition header\n");
+  read_partition_header(section, disk, part_offset, &php);
+
+  p.number = 0;
+  p.offset = (part_offset + START_OF_SECTION(section) + IGF_SECT_HDR_LEN) / GRUB_DISK_SECTOR_SIZE;
+  p.index = (part_offset + START_OF_SECTION(section) + IGF_SECT_HDR_LEN) % GRUB_DISK_SECTOR_SIZE;
+  p.start = p.offset;
+  //p.start = p.offset + (grub_le_to_cpu32 (php.offset_kernel) << (disk->log_sector_size - GRUB_DISK_SECTOR_BITS));
+  p.len = (grub_le_to_cpu32 (n_sections << IGF_SECTION_SHIFT) >> GRUB_DISK_SECTOR_BITS) << (disk->log_sector_size - GRUB_DISK_SECTOR_BITS);
+  p.partmap = pmap;
+  p.parent = partition;
+
+  grub_dprintf("partition", "partition %d: offset 0x%llx, index 0x%x, start kernel 0x%llx, len 0x%llx\n", p.number, (unsigned long long)p.offset, p.index, (unsigned long long)p.start, (unsigned long long)p.len);
+
+  if (hook (disk, &p, hook_data))
+    return grub_errno;
+
+  if (directory_present == 1) {
+    for (i=2;i<IGF_MAX_MINORS;i++) {
+      section = get_physical_section(&pdir, i, 0);
+      if (section == end_section)
+        continue;
+      if (i == 23)  bspl_first_section = section;
+      if (i == 252) cbspl_first_section = section;
+      read_partition_header(section, disk, part_offset, &php);
+      p.number = i - 1;
+      p.offset = (part_offset + START_OF_SECTION(section) + IGF_SECT_HDR_LEN) / GRUB_DISK_SECTOR_SIZE;
+      p.index = (part_offset + START_OF_SECTION(section) + IGF_SECT_HDR_LEN) % GRUB_DISK_SECTOR_SIZE;
+      p.start = p.offset;
+      //p.start = p.offset + (grub_le_to_cpu32 (php.offset_blocktable) << (disk->log_sector_size - GRUB_DISK_SECTOR_BITS));
+      p.len = php.partlen >> GRUB_DISK_SECTOR_BITS;
+      p.partmap = pmap;
+      p.parent = partition;
+      grub_dprintf("partition", "partition %d: offset 0x%llx, index 0x%x, start kernel 0x%llx, len 0x%llx\n", p.number, (unsigned long long)p.offset, p.index, (unsigned long long)p.start, (unsigned long long)p.len);
+      if (hook (disk, &p, hook_data))
+        return grub_errno;
+    }
+  }
+  return GRUB_ERR_NONE;
+}
+
+/* Context for igel_partition_map_iterate.  */
+struct igelpartition_ctx
+{
+  grub_uint8_t type;
+  struct grub_partition_map *pmap;
+  grub_partition_iterate_hook_t hook;
+  void *hook_data;
+  int count;
+};
+
+/* Helper for igel_partition_map_iterate.  */
+static int
+check_msdos (grub_disk_t dsk, const grub_partition_t partition, void *data)
+{
+  struct igelpartition_ctx *ctx = data;
+  grub_err_t err;
+
+  grub_dprintf("partition", "check_msdos\n");
+
+  if (partition->msdostype != ctx->type) {
+    grub_errno = GRUB_ERR_NONE;
+    return 0;
+  }
+
+  err = iterate_real (dsk, partition, ctx->pmap,
+		      ctx->hook, ctx->hook_data);
+
+  if (err == GRUB_ERR_NONE)
+    {
+      ctx->count++;
+      return 1;
+    }
+  if (err == GRUB_ERR_BAD_PART_TABLE)
+    {
+      grub_errno = GRUB_ERR_NONE;
+      return 0;
+    }
+  grub_print_error ();
+  return 0;
+}
+
+/* Helper for igel_partition_map_iterate.  */
+static int
+check_gpt (grub_disk_t dsk, const grub_partition_t partition, void *data)
+{
+  struct igelpartition_ctx *ctx = data;
+  grub_err_t err;
+
+  grub_dprintf("partition", "check_gpt\n");
+
+  err = iterate_real (dsk, partition, ctx->pmap,
+		          ctx->hook, ctx->hook_data);
+
+  if (err == GRUB_ERR_NONE)
+    {
+      ctx->count++;
+      return 1;
+    }
+  if (err == GRUB_ERR_BAD_PART_TABLE)
+    {
+      grub_errno = GRUB_ERR_NONE;
+      return 0;
+    }
+  grub_print_error ();
+  return 0;
+}
+
+static grub_err_t
+igel_partition_map_iterate (grub_disk_t disk,
+			    grub_partition_iterate_hook_t hook,
+			    void *hook_data)
+{
+
+  if (disk->partition && grub_strcmp (disk->partition->partmap->name, "msdos")
+      == 0)
+    return grub_error (GRUB_ERR_BAD_PART_TABLE, "no embedding supported");
+
+  if (disk->partition && grub_strcmp (disk->partition->partmap->name, "gpt")
+      == 0)
+    return grub_error (GRUB_ERR_BAD_PART_TABLE, "no embedding supported");
+
+  struct igelpartition_ctx ctx = {
+    .type = GRUB_PC_PARTITION_TYPE_EXT2FS,
+    .pmap = &grub_igel_partition_map,
+    .hook = hook,
+    .hook_data = hook_data,
+    .count = 0
+  };
+  grub_err_t err;
+  struct grub_msdos_partition_mbr mbr;
+  unsigned int i;
+  unsigned int gpt = 0;
+
+  /* Read the protective MBR.  */
+  if (! grub_disk_read (disk, 0, 0, sizeof (mbr), &mbr)) {
+    /* Check if it is valid.  */
+    if (mbr.signature == grub_cpu_to_le16 (GRUB_PC_PARTITION_SIGNATURE)) {
+      /* Make sure the MBR is a protective MBR and not a normal MBR.  */
+      for (i = 0; i < 4; i++)
+        if (mbr.entries[i].type == GRUB_PC_PARTITION_TYPE_GPT_DISK)
+          break;
+      if (i < 4) {
+        grub_dprintf("partition", "Search for IGEL partition (gpt partition table)\n");
+        err = grub_gpt_partition_map_iterate(disk, check_gpt, &ctx);
+        gpt = 1;
+      }
+    }
+  }
+
+  if (gpt == 0) {
+    grub_dprintf("partition", "Search for IGEL partition (msdos partition table)\n");
+    err = grub_partition_msdos_iterate (disk, check_msdos, &ctx);
+  }
+
+  if (err)
+    return err;
+  if (!ctx.count)
+    return grub_error (GRUB_ERR_BAD_PART_TABLE, "no igel sys partition found");
+
+  return GRUB_ERR_NONE;
+}
+
+static struct grub_partition_map grub_igel_partition_map =
+  {
+    .name = "igel",
+    .iterate = igel_partition_map_iterate,
+  };
+
+GRUB_MOD_INIT(part_igel)
+{
+  grub_partition_map_register (&grub_igel_partition_map);
+}
+
+GRUB_MOD_FINI(part_igel)
+{
+  grub_partition_map_unregister (&grub_igel_partition_map);
+}
--- /dev/null
+++ b/include/grub/igel_partition.h
@@ -0,0 +1,50 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 1999,2000,2001,2002,2004,2007  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef GRUB_IGEL_PARTITION_HEADER
+#define GRUB_IGEL_PARTITION_HEADER	1
+
+#include <grub/types.h>
+#include <grub/partition.h>
+#include <grub/disk.h>
+#include <grub/mm.h>
+
+#define GRUB2_BOOTCODE 1
+
+/* function prototypes needed by directory.c */
+grub_uint32_t updcrc(unsigned char *s, unsigned int n);
+void makecrc(void);
+grub_err_t igelpart_disk_read (grub_disk_t disk, grub_uint64_t offset, grub_size_t size, void *buf);
+
+#define uint8_t grub_uint8_t
+#define uint16_t grub_uint16_t
+#define uint32_t grub_uint32_t
+#define uint64_t grub_uint64_t
+#define u_int8_t grub_uint8_t
+#define u_int16_t grub_uint16_t
+#define u_int32_t grub_uint32_t
+#define u_int64_t grub_uint64_t
+#define loff_t grub_uint64_t
+typedef unsigned long size_t;
+
+#include <igel.h>
+
+/* Maximum size of the sys partition where the kernel could be (can be easily extended) currently 64 MB*/
+#define MAX_KERNEL_SYS_SECTIONS (64 << 20) / IGF_SECTION_SIZE
+
+#endif /* ! GRUB_IGEL_PARTITION_HEADER */
