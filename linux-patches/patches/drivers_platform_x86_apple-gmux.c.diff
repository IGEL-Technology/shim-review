diff -Naurp a/linux-6.6.38.igel/drivers/platform/x86/apple-gmux.c b/linux-6.6.38.igel/drivers/platform/x86/apple-gmux.c
--- a/linux-6.6.38.igel/drivers/platform/x86/apple-gmux.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/drivers/platform/x86/apple-gmux.c	2024-08-02 15:41:31.559491681 +0200
@@ -21,6 +21,9 @@
 #include <linux/delay.h>
 #include <linux/pci.h>
 #include <linux/vga_switcheroo.h>
+#ifdef CONFIG_IGEL_APPLE_GMUX
+#include <linux/vgaarb.h>
+#endif
 #include <linux/debugfs.h>
 #include <acpi/video.h>
 #include <asm/io.h>
@@ -91,6 +94,9 @@ struct apple_gmux_config {
 	enum vga_switcheroo_handler_flags_t handler_flags;
 	unsigned long resource_type;
 	bool read_version_as_u32;
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	bool use_acpi_gmsp;
+#endif
 	char *name;
 };
 
@@ -107,6 +113,12 @@ struct apple_gmux_config {
 
 # define MMIO_GMUX_MAX_BRIGHTNESS	0xffff
 
+#ifdef CONFIG_IGEL_APPLE_GMUX
+static bool force_igd;
+module_param(force_igd, bool, 0);
+MODULE_PARM_DESC(force_idg, "Switch gpu to igd on module load. Make sure that you have apple-set-os set up and the iGPU is in `lspci -s 00:02.0`. (default: false) (bool)");
+#endif
+
 static u8 gmux_pio_read8(struct apple_gmux_data *gmux_data, int port)
 {
 	return inb(gmux_data->iostart + port);
@@ -578,6 +590,9 @@ static const struct apple_gmux_config ap
 	.handler_flags = VGA_SWITCHEROO_CAN_SWITCH_DDC,
 	.resource_type = IORESOURCE_IO,
 	.read_version_as_u32 = false,
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	.use_acpi_gmsp = false,
+#endif
 	.name = "classic"
 };
 
@@ -590,6 +605,9 @@ static const struct apple_gmux_config ap
 	.handler_flags = VGA_SWITCHEROO_NEEDS_EDP_CONFIG,
 	.resource_type = IORESOURCE_IO,
 	.read_version_as_u32 = true,
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	.use_acpi_gmsp = false,
+#endif
 	.name = "indexed"
 };
 
@@ -602,6 +620,9 @@ static const struct apple_gmux_config ap
 	.handler_flags = VGA_SWITCHEROO_NEEDS_EDP_CONFIG,
 	.resource_type = IORESOURCE_MEM,
 	.read_version_as_u32 = true,
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	.use_acpi_gmsp = true,
+#endif
 	.name = "T2"
 };
 
@@ -631,6 +652,26 @@ static const struct apple_gmux_config ap
  * that can't be cleared. This issue seems to be unique to MMIO gmux's.
  */
 
+#ifdef CONFIG_IGEL_APPLE_GMUX
+static int gmux_call_acpi_gmsp(struct apple_gmux_data *gmux_data, int arg)
+{
+	acpi_status status = AE_OK;
+	union acpi_object arg0 = { ACPI_TYPE_INTEGER };
+	struct acpi_object_list arg_list = { 1, &arg0 };
+
+	arg0.integer.value = arg;
+
+	status = acpi_evaluate_object(gmux_data->dhandle, "GMSP", &arg_list, NULL);
+	if (ACPI_FAILURE(status)) {
+		pr_err("GMSP call failed: %s\n",
+		       acpi_format_exception(status));
+		return -ENODEV;
+	}
+
+	return 0;
+}
+#endif
+
 static inline void gmux_disable_interrupts(struct apple_gmux_data *gmux_data)
 {
 	gmux_write8(gmux_data, GMUX_PORT_INTERRUPT_ENABLE,
@@ -655,9 +696,14 @@ static void gmux_clear_interrupts(struct
 	/* to clear interrupts write back current status */
 	status = gmux_interrupt_get_status(gmux_data);
 	gmux_write8(gmux_data, GMUX_PORT_INTERRUPT_STATUS, status);
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	if (gmux_data->config->use_acpi_gmsp)
+		gmux_call_acpi_gmsp(gmux_data, 0);
+#else
 	/* Prevent flood of status=0 interrupts */
 	if (gmux_data->config == &apple_gmux_mmio)
 		acpi_execute_simple_method(gmux_data->dhandle, "GMSP", 0);
+#endif
 }
 
 static void gmux_notify_handler(acpi_handle device, u32 value, void *context)
@@ -695,6 +741,9 @@ static ssize_t gmux_selected_port_data_w
 		const char __user *userbuf, size_t count, loff_t *ppos)
 {
 	struct apple_gmux_data *gmux_data = file->private_data;
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	int ret;
+#endif
 
 	if (*ppos)
 		return -EINVAL;
@@ -702,15 +751,27 @@ static ssize_t gmux_selected_port_data_w
 	if (count == 1) {
 		u8 data;
 
+#ifdef CONFIG_IGEL_APPLE_GMUX
+		ret = copy_from_user(&data, userbuf, 1);
+		if (ret)
+			return ret;
+#else
 		if (copy_from_user(&data, userbuf, 1))
 			return -EFAULT;
+#endif
 
 		gmux_write8(gmux_data, gmux_data->selected_port, data);
 	} else if (count == 4) {
 		u32 data;
 
+#ifdef CONFIG_IGEL_APPLE_GMUX
+		ret = copy_from_user(&data, userbuf, 4);
+		if (ret)
+			return ret;
+#else
 		if (copy_from_user(&data, userbuf, 4))
 			return -EFAULT;
+#endif
 
 		gmux_write32(gmux_data, gmux_data->selected_port, data);
 	} else
@@ -945,6 +1006,21 @@ get_version:
 	gmux_enable_interrupts(gmux_data);
 	gmux_read_switch_state(gmux_data);
 
+#ifdef CONFIG_IGEL_APPLE_GMUX
+	if (force_igd) {
+		struct pci_dev *pdev;
+
+		pdev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(2, 0));
+		if (pdev) {
+			pr_info("Switching to IGD");
+			gmux_switchto(VGA_SWITCHEROO_IGD);
+			vga_set_default_device(pdev);
+		} else {
+			pr_err("force_idg is true, but couldn't find iGPU at 00:02.0! Is apple-set-os working?");
+		}
+	}
+#endif
+
 	/*
 	 * Retina MacBook Pros cannot switch the panel's AUX separately
 	 * and need eDP pre-calibration. They are distinguishable from
