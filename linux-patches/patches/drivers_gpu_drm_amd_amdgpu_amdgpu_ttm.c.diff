diff -Naurp a/linux-6.6.38.igel/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c b/linux-6.6.38.igel/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
--- a/linux-6.6.38.igel/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c	2024-08-02 15:41:31.535491108 +0200
@@ -1937,12 +1937,33 @@ int amdgpu_ttm_init(struct amdgpu_device
 	DRM_INFO("amdgpu: %uM of VRAM memory ready\n",
 		 (unsigned int)(adev->gmc.real_vram_size / (1024 * 1024)));
 
+#ifdef CONFIG_IGEL_AMDGPU_LIMIT_MAX_GTT_SIZE
+	/* Compute GTT size, either based on 1/4 the size of RAM size
+	 * or whatever the user passed on module init */
+	if (amdgpu_gtt_size == -1) {
+		struct sysinfo si;
+
+		si_meminfo(&si);
+		/* Certain GL unit tests for large textures can cause problems
+		 * with the OOM killer since there is no way to link this memory
+		 * to a process.  This was originally mitigated (but not necessarily
+		 * eliminated) by limiting the GTT size.  The problem is this limit
+		 * is often too low for many modern games so just make the limit 1/2
+		 * of system memory which aligns with TTM. The OOM accounting needs
+		 * to be addressed, but we shouldn't prevent common 3D applications
+		 * from being usable just to potentially mitigate that corner case.
+		 */
+		gtt_size = min((3072ULL << 20),
+			       ((u64)si.totalram * si.mem_unit / 4));
+	} else
+#else
 	/* Compute GTT size, either based on TTM limit
 	 * or whatever the user passed on module init.
 	 */
 	if (amdgpu_gtt_size == -1)
 		gtt_size = ttm_tt_pages_limit() << PAGE_SHIFT;
 	else
+#endif
 		gtt_size = (uint64_t)amdgpu_gtt_size << 20;
 
 	/* Initialize GTT memory pool */
