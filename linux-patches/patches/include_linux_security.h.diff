diff -Naurp a/linux-6.6.38.igel/include/linux/security.h b/linux-6.6.38.igel/include/linux/security.h
--- a/linux-6.6.38.igel/include/linux/security.h	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/include/linux/security.h	2024-08-02 15:41:31.567491872 +0200
@@ -139,6 +139,67 @@ enum lockdown_reason {
 
 extern const char *const lockdown_reasons[LOCKDOWN_CONFIDENTIALITY_MAX+1];
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+/*
+ * Data exported by the security modules
+ *
+ * Any LSM that provides secid or secctx based hooks must be included.
+ */
+#define LSMBLOB_ENTRIES ( \
+	(IS_ENABLED(CONFIG_SECURITY_SELINUX) ? 1 : 0) + \
+	(IS_ENABLED(CONFIG_SECURITY_SMACK) ? 1 : 0) + \
+	(IS_ENABLED(CONFIG_SECURITY_APPARMOR) ? 1 : 0) + \
+	(IS_ENABLED(CONFIG_BPF_LSM) ? 1 : 0))
+
+struct lsmblob {
+	u32     secid[LSMBLOB_ENTRIES];
+};
+
+#define LSMBLOB_INVALID		-1	/* Not a valid LSM slot number */
+#define LSMBLOB_NEEDED		-2	/* Slot requested on initialization */
+#define LSMBLOB_NOT_NEEDED	-3	/* Slot not requested */
+
+/**
+ * lsmblob_init - initialize an lsmblob structure.
+ * @blob: Pointer to the data to initialize
+ * @secid: The initial secid value
+ *
+ * Set all secid for all modules to the specified value.
+ */
+static inline void lsmblob_init(struct lsmblob *blob, u32 secid)
+{
+	int i;
+
+	for (i = 0; i < LSMBLOB_ENTRIES; i++)
+		blob->secid[i] = secid;
+}
+
+/**
+ * lsmblob_is_set - report if there is an value in the lsmblob
+ * @blob: Pointer to the exported LSM data
+ *
+ * Returns true if there is a secid set, false otherwise
+ */
+static inline bool lsmblob_is_set(struct lsmblob *blob)
+{
+	struct lsmblob empty = {};
+
+	return !!memcmp(blob, &empty, sizeof(*blob));
+}
+
+/**
+ * lsmblob_equal - report if the two lsmblob's are equal
+ * @bloba: Pointer to one LSM data
+ * @blobb: Pointer to the other LSM data
+ *
+ * Returns true if all entries in the two are equal, false otherwise
+ */
+static inline bool lsmblob_equal(struct lsmblob *bloba, struct lsmblob *blobb)
+{
+	return !memcmp(bloba, blobb, sizeof(*bloba));
+}
+#endif /* CONFIG_IGEL_APPARMOR_DBUS_SUPPORT */
+
 /* These functions are in security/commoncap.c */
 extern int cap_capable(const struct cred *cred, struct user_namespace *ns,
 		       int cap, unsigned int opts);
@@ -1955,8 +2016,13 @@ static inline int security_key_getsecuri
 #ifdef CONFIG_SECURITY
 int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule);
 int security_audit_rule_known(struct audit_krule *krule);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+int security_audit_rule_match(u32 secid, u32 field, u32 op, void **lsmrule);
+void security_audit_rule_free(void **lsmrule);
+#else
 int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule);
 void security_audit_rule_free(void *lsmrule);
+#endif
 
 #else
 
@@ -1971,13 +2037,22 @@ static inline int security_audit_rule_kn
 	return 0;
 }
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static inline int security_audit_rule_match(u32 secid, u32 field, u32 op,
+					    void **lsmrule)
+#else
 static inline int security_audit_rule_match(u32 secid, u32 field, u32 op,
 					    void *lsmrule)
+#endif
 {
 	return 0;
 }
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static inline void security_audit_rule_free(void **lsmrule)
+#else
 static inline void security_audit_rule_free(void *lsmrule)
+#endif
 { }
 
 #endif /* CONFIG_SECURITY */
