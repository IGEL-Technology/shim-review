diff -Naurp a/linux-6.6.38.igel/sound/soc/codecs/rt5645.c b/linux-6.6.38.igel/sound/soc/codecs/rt5645.c
--- a/linux-6.6.38.igel/sound/soc/codecs/rt5645.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/sound/soc/codecs/rt5645.c	2024-08-02 15:41:31.575492063 +0200
@@ -42,6 +42,13 @@ static unsigned int quirk = -1;
 module_param(quirk, uint, 0444);
 MODULE_PARM_DESC(quirk, "RT5645 pdata quirk override");
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+unsigned int rt5645_jack_option = 0;
+module_param(rt5645_jack_option, uint, 0644);
+MODULE_PARM_DESC(rt5645_jack_option, "RT5645 Select combo jack(0) or split jack(1)");
+EXPORT_SYMBOL(rt5645_jack_option);
+#endif
+
 static const struct acpi_gpio_mapping *cht_rt5645_gpios;
 
 #define RT5645_DEVICE_ID 0x6308
@@ -3272,7 +3279,9 @@ int rt5645_set_jack_detect(struct snd_so
 		regmap_update_bits(rt5645->regmap, RT5645_DEPOP_M1,
 				RT5645_HP_CB_MASK, RT5645_HP_CB_PU);
 	}
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
 	rt5645_irq(0, rt5645);
+#endif
 
 	return 0;
 }
@@ -3302,11 +3311,62 @@ static void rt5645_jack_detect_work(stru
 {
 	struct rt5645_priv *rt5645 =
 		container_of(work, struct rt5645_priv, jack_detect_work.work);
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	int val, btn_type, gpio_state = 0, report = 0, cmp;
+#else
 	int val, btn_type, gpio_state = 0, report = 0;
+#endif
 
 	if (!rt5645->component)
 		return;
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	if (rt5645_jack_option == 1) {
+		/* Use JD1 2 ports check instead */
+		/*
+		 * HP is port 2 (JD 1_2)
+		 * MIC is port 1 (JD 1_1)
+		 */
+		cmp = snd_soc_component_read(rt5645->component, RT5645_A_JD_CTRL1) & 0x0070;
+		val = snd_soc_component_read(rt5645->component, RT5645_INT_IRQ_ST) & 0x3000;
+		pr_info("%s, cmp=0x%x, val=0x%x \n", __func__, cmp, val);
+		switch (cmp) {
+		case 0x10:
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_1_MASK, RT5645_JD_1_1_INV);
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_2_MASK, RT5645_JD_1_2_NOR);
+			snd_soc_jack_report(rt5645->hp_jack, SND_JACK_HEADPHONE, SND_JACK_HEADPHONE);
+			snd_soc_jack_report(rt5645->mic_jack, 0, SND_JACK_MICROPHONE);
+			break;
+		case 0x30:
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_1_MASK, RT5645_JD_1_1_NOR);
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_2_MASK, RT5645_JD_1_2_INV);
+			snd_soc_jack_report(rt5645->mic_jack, SND_JACK_MICROPHONE, SND_JACK_MICROPHONE);
+			snd_soc_jack_report(rt5645->hp_jack, 0, SND_JACK_HEADPHONE);
+			break;
+		case 0x00:
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_1_MASK, RT5645_JD_1_1_NOR);
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_2_MASK, RT5645_JD_1_2_NOR);
+			snd_soc_jack_report(rt5645->mic_jack, SND_JACK_MICROPHONE, SND_JACK_MICROPHONE);
+			snd_soc_jack_report(rt5645->hp_jack, SND_JACK_HEADPHONE, SND_JACK_HEADPHONE);
+			break;
+		default:
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_1_MASK | RT5645_JD_1_2_MASK,
+				RT5645_JD_1_1_INV | RT5645_JD_1_2_INV);
+			snd_soc_jack_report(rt5645->hp_jack, 0, SND_JACK_HEADPHONE);
+			snd_soc_jack_report(rt5645->mic_jack, 0, SND_JACK_MICROPHONE);
+			break;
+		}
+		return;
+	}
+#endif
+
 	mutex_lock(&rt5645->jd_mutex);
 
 	switch (rt5645->pdata.jd_mode) {
@@ -3434,6 +3494,10 @@ static int rt5645_probe(struct snd_soc_c
 	struct snd_soc_dapm_context *dapm = snd_soc_component_get_dapm(component);
 	struct rt5645_priv *rt5645 = snd_soc_component_get_drvdata(component);
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	pr_info("%s: rt5645_jack_option=%d\n", __func__, rt5645_jack_option);	
+#endif
+
 	rt5645->component = component;
 
 	switch (rt5645->codec_type) {
@@ -3697,6 +3761,13 @@ static const struct rt5645_platform_data
 	.jd_mode = 3,
 };
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+static const struct rt5645_platform_data jd_mode1_platform_data = {
+	.jd_mode = 1,
+	.inv_jd1_1 = true,
+};
+#endif
+
 static const struct rt5645_platform_data lattepanda_board_platform_data = {
 	.jd_mode = 2,
 	.inv_jd1_1 = true
@@ -3763,6 +3834,17 @@ static const struct dmi_system_id dmi_pl
 		},
 		.driver_data = (void *)&intel_braswell_platform_data,
 	},
+#ifdef CONFIG_IGEL_SURFACE_SURFACE3_OEMB_FIX
+	{
+		.ident = "Microsoft Surface 3",
+		.matches = {
+			DMI_MATCH(DMI_BIOS_VENDOR, "American Megatrends Inc."),
+			DMI_MATCH(DMI_SYS_VENDOR, "OEMB"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "OEMB"),
+		},
+		.driver_data = (void *)&intel_braswell_platform_data,
+	},
+#endif
 	{
 		/*
 		 * Match for the GPDwin which unfortunately uses somewhat
@@ -3910,6 +3992,9 @@ static int rt5645_i2c_probe(struct i2c_c
 	int ret, i;
 	unsigned int val;
 	struct regmap *regmap;
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	const char *product = NULL, *vendor = NULL;
+#endif
 
 	rt5645 = devm_kzalloc(&i2c->dev, sizeof(struct rt5645_priv),
 				GFP_KERNEL);
@@ -3925,12 +4010,33 @@ static int rt5645_i2c_probe(struct i2c_c
 		pdata = dmi_data->driver_data;
 	}
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	if (rt5645_jack_option == 0 ) {
+		product = dmi_get_system_info(DMI_PRODUCT_NAME);
+		vendor = dmi_get_system_info(DMI_SYS_VENDOR);
+		if (product != NULL && vendor != NULL) {
+			if (strstr(product, "HP t240 Thin Client") && 
+				strstr(vendor, "HP")) {
+					rt5645_jack_option = 1;
+					pr_info("%s, HP t240 detected, rt5645_jack_option=%d\n", __func__, rt5645_jack_option);
+				}
+		}
+	}
+#endif
+
 	if (pdata)
 		rt5645->pdata = *pdata;
 	else if (rt5645_check_dp(&i2c->dev))
 		rt5645_parse_dt(rt5645, &i2c->dev);
 	else
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+		if (rt5645_jack_option == 1)
+			rt5645->pdata = jd_mode1_platform_data;
+		else
+			rt5645->pdata = jd_mode3_platform_data;
+#else
 		rt5645->pdata = jd_mode3_platform_data;
+#endif
 
 	if (quirk != -1) {
 		rt5645->pdata.in2_diff = QUIRK_IN2_DIFF(quirk);
@@ -4058,6 +4164,15 @@ static int rt5645_i2c_probe(struct i2c_c
 					   ret);
 	}
 
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+	if (rt5645_jack_option == 1) {
+		regmap_write(rt5645->regmap, RT5645_GEN_CTRL3, 0x1b00);
+		regmap_write(rt5645->regmap, RT5645_IN1_CTRL1, 0x0022);
+		regmap_write(rt5645->regmap, RT5645_IN1_CTRL2, 0x68a7);
+		regmap_write(rt5645->regmap, RT5645_IN1_CTRL3, 0x2004);
+	}
+#endif
+
 	regmap_update_bits(rt5645->regmap, RT5645_CLSD_OUT_CTRL, 0xc0, 0xc0);
 
 	if (rt5645->pdata.in2_diff)
@@ -4146,6 +4261,10 @@ static int rt5645_i2c_probe(struct i2c_c
 				   RT5645_GP1_PIN_IRQ, RT5645_GP1_PIN_IRQ);
 		switch (rt5645->pdata.jd_mode) {
 		case 1:
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+					   RT5645_IRQ_JD_1_2_EN, RT5645_IRQ_JD_1_2_EN);
+#endif
 			regmap_update_bits(rt5645->regmap, RT5645_A_JD_CTRL1,
 					   RT5645_JD1_MODE_MASK,
 					   RT5645_JD1_MODE_0);
@@ -4167,6 +4286,10 @@ static int rt5645_i2c_probe(struct i2c_c
 		if (rt5645->pdata.inv_jd1_1) {
 			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
 				RT5645_JD_1_1_MASK, RT5645_JD_1_1_INV);
+#ifdef CONFIG_IGEL_HP_T240_SOUND_FIXES
+			regmap_update_bits(rt5645->regmap, RT5645_IRQ_CTRL2,
+				RT5645_JD_1_2_MASK, RT5645_JD_1_2_INV);
+#endif
 		}
 	}
 
