diff -Naurp a/linux-6.6.38.igel/security/apparmor/net.c b/linux-6.6.38.igel/security/apparmor/net.c
--- a/linux-6.6.38.igel/security/apparmor/net.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/security/apparmor/net.c	2024-08-02 15:41:31.571491967 +0200
@@ -8,6 +8,9 @@
  * Copyright 2009-2017 Canonical Ltd.
  */
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+#include "include/af_unix.h"
+#endif
 #include "include/apparmor.h"
 #include "include/audit.h"
 #include "include/cred.h"
@@ -24,6 +27,14 @@ struct aa_sfs_entry aa_sfs_entry_network
 	{ }
 };
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+struct aa_sfs_entry aa_sfs_entry_network_compat[] = {
+	AA_SFS_FILE_STRING("af_mask",	AA_SFS_AF_MASK),
+	AA_SFS_FILE_BOOLEAN("af_unix",	1),
+	{ }
+};
+#endif
+
 static const char * const net_mask_names[] = {
 	"unknown",
 	"send",
@@ -66,6 +77,38 @@ static const char * const net_mask_names
 	"unknown",
 };
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static void audit_unix_addr(struct audit_buffer *ab, const char *str,
+			    struct sockaddr_un *addr, int addrlen)
+{
+	int len = unix_addr_len(addrlen);
+
+	if (!addr || len <= 0) {
+		audit_log_format(ab, " %s=none", str);
+	} else if (addr->sun_path[0]) {
+		audit_log_format(ab, " %s=", str);
+		audit_log_untrustedstring(ab, addr->sun_path);
+	} else {
+		audit_log_format(ab, " %s=\"@", str);
+		if (audit_string_contains_control(&addr->sun_path[1], len - 1))
+			audit_log_n_hex(ab, &addr->sun_path[1], len - 1);
+		else
+			audit_log_format(ab, "%.*s", len - 1,
+					 &addr->sun_path[1]);
+		audit_log_format(ab, "\"");
+	}
+}
+
+static void audit_unix_sk_addr(struct audit_buffer *ab, const char *str,
+			       const struct sock *sk)
+{
+	struct unix_sock *u = unix_sk(sk);
+	if (u && u->addr)
+		audit_unix_addr(ab, str, u->addr->name, u->addr->len);
+	else
+		audit_unix_addr(ab, str, NULL, 0);
+}
+#endif
 
 /* audit callback for net specific fields */
 void audit_net_cb(struct audit_buffer *ab, void *va)
@@ -98,6 +141,25 @@ void audit_net_cb(struct audit_buffer *a
 					   net_mask_names, NET_PERMS_MASK);
 		}
 	}
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	if (sa->u.net->family == AF_UNIX) {
+		if ((ad->request & ~NET_PEER_MASK) && ad->net.addr)
+			audit_unix_addr(ab, "addr",
+					unix_addr(ad->net.addr),
+					ad->net.addrlen);
+		else
+			audit_unix_sk_addr(ab, "addr", sa->u.net->sk);
+		if (ad->request & NET_PEER_MASK) {
+			if (ad->net.addr)
+				audit_unix_addr(ab, "peer_addr",
+						unix_addr(ad->net.addr),
+						ad->net.addrlen);
+			else
+				audit_unix_sk_addr(ab, "peer_addr",
+						   ad->net.peer_sk);
+		}
+	}
+#endif
 	if (ad->peer) {
 		audit_log_format(ab, " peer=");
 		aa_label_xaudit(ab, labels_ns(ad->subj_label), ad->peer,
@@ -122,6 +184,26 @@ int aa_profile_af_perm(struct aa_profile
 	if (profile_unconfined(profile))
 		return 0;
 	state = RULE_MEDIATES(rules, AA_CLASS_NET);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	if (state) {
+		buffer[0] = cpu_to_be16(family);
+		buffer[1] = cpu_to_be16((u16) type);
+		state = aa_dfa_match_len(profile->policy.dfa, state,
+					 (char *) &buffer, 4);
+		perms = *aa_lookup_perms(&rules->policy, state);
+	} else if (profile->net_compat) {
+		/* 2.x socket mediation compat */
+		perms.allow = (profile->net_compat->allow[family] & (1 << type)) ?
+			ALL_PERMS_MASK : 0;
+		perms.audit = (profile->net_compat->audit[family] & (1 << type)) ?
+			ALL_PERMS_MASK : 0;
+		perms.quiet = (profile->net_compat->quiet[family] & (1 << type)) ?
+			ALL_PERMS_MASK : 0;
+
+	} else {
+		return 0;
+	}
+#else
 	if (!state)
 		return 0;
 
@@ -130,6 +212,7 @@ int aa_profile_af_perm(struct aa_profile
 	state = aa_dfa_match_len(rules->policy.dfa, state, (char *) &buffer,
 				 4);
 	perms = *aa_lookup_perms(&rules->policy, state);
+#endif
 	aa_apply_modes_to_perms(profile, &perms);
 
 	return aa_check_perms(profile, &perms, request, ad, audit_net_cb);
@@ -151,7 +234,11 @@ static int aa_label_sk_perm(const struct
 			    const char *op, u32 request,
 			    struct sock *sk)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
+#endif
 	int error = 0;
 
 	AA_BUG(!label);
@@ -193,7 +280,13 @@ int aa_sock_file_perm(const struct cred
 	AA_BUG(!sock);
 	AA_BUG(!sock->sk);
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	return af_select(sock->sk->sk_family,
+			 file_perm(label, op, request, sock),
+			 aa_label_sk_perm(subj_cred, label, op, request, sock->sk));
+#else
 	return aa_label_sk_perm(subj_cred, label, op, request, sock->sk);
+#endif
 }
 
 #ifdef CONFIG_NETWORK_SECMARK
