diff -Naurp a/linux-6.6.38.igel/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c b/linux-6.6.38.igel/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c
--- a/linux-6.6.38.igel/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c	2024-08-02 15:41:31.547491394 +0200
@@ -274,6 +274,10 @@ static int vmw_assume_16bpp;
 static int vmw_probe(struct pci_dev *, const struct pci_device_id *);
 static int vmwgfx_pm_notifier(struct notifier_block *nb, unsigned long val,
 			      void *ptr);
+#ifdef CONFIG_IGEL_VMWGFX_FIX
+static int vmw_setup_pci_resources(struct vmw_private *dev,
+				   u32 pci_id);
+#endif
 
 MODULE_PARM_DESC(restrict_iommu, "Try to limit IOMMU usage for TTM pages");
 module_param_named(restrict_iommu, vmw_restrict_iommu, int, 0600);
@@ -720,6 +724,7 @@ static void vmw_vram_manager_fini(struct
 	ttm_range_man_fini(&dev_priv->bdev, TTM_PL_VRAM);
 }
 
+#ifndef CONFIG_IGEL_VMWGFX_FIX
 static int vmw_setup_pci_resources(struct vmw_private *dev,
 				   u32 pci_id)
 {
@@ -793,6 +798,7 @@ static int vmw_setup_pci_resources(struc
 
 	return 0;
 }
+#endif /* ! CONFIG_IGEL_VMWGFX_FIX */
 
 static int vmw_detect_version(struct vmw_private *dev)
 {
@@ -856,6 +862,16 @@ static int vmw_driver_load(struct vmw_pr
 	enum vmw_res_type i;
 	bool refuse_dma = false;
 	struct pci_dev *pdev = to_pci_dev(dev_priv->drm.dev);
+#ifdef CONFIG_IGEL_VMWGFX_FIX
+	uint32_t capabilities = 0;
+
+	capabilities = vmw_read(dev_priv, SVGA_REG_CAPABILITIES);
+	if (!(capabilities & SVGA_CAP_DISPLAY_TOPOLOGY) &&
+	    !(capabilities & SVGA_CAP_PITCHLOCK) &&
+	    !vmw_fifo_have_pitchlock(dev_priv)) {
+		return -ENOSYS;
+	}
+#endif
 
 	dev_priv->drm.dev_private = dev_priv;
 
@@ -1642,14 +1658,97 @@ static struct pci_driver vmw_pci_driver
 	}
 };
 
+#ifdef CONFIG_IGEL_VMWGFX_FIX
+static int vmw_setup_pci_resources(struct vmw_private *dev,
+				   u32 pci_id)
+{
+	resource_size_t rmmio_start;
+	resource_size_t rmmio_size;
+	resource_size_t fifo_start;
+	resource_size_t fifo_size;
+	int ret;
+	struct pci_dev *pdev = to_pci_dev(dev->drm.dev);
+
+	pci_set_master(pdev);
+
+	/* IGEL ensure we tried to release the conflicting framebuffer */
+	ret = drm_aperture_remove_conflicting_pci_framebuffers(pdev, &driver);
+
+	ret = pci_request_regions(pdev, "vmwgfx probe");
+	if (ret) {
+		drm_warn(&dev->drm, "PCI request regions failed continue anyways.");
+	}
+
+	dev->pci_id = pci_id;
+	if (pci_id == VMWGFX_PCI_ID_SVGA3) {
+		rmmio_start = pci_resource_start(pdev, 0);
+		rmmio_size = pci_resource_len(pdev, 0);
+		dev->vram_start = pci_resource_start(pdev, 2);
+		dev->vram_size = pci_resource_len(pdev, 2);
+
+		drm_info(&dev->drm,
+			"Register MMIO at 0x%pa size is %llu kiB\n",
+			 &rmmio_start, (uint64_t)rmmio_size / 1024);
+		dev->rmmio = devm_ioremap(dev->drm.dev,
+					  rmmio_start,
+					  rmmio_size);
+		if (!dev->rmmio) {
+			drm_err(&dev->drm,
+				"Failed mapping registers mmio memory.\n");
+			pci_release_regions(pdev);
+			return -ENOMEM;
+		}
+	} else if (pci_id == VMWGFX_PCI_ID_SVGA2) {
+		dev->io_start = pci_resource_start(pdev, 0);
+		dev->vram_start = pci_resource_start(pdev, 1);
+		dev->vram_size = pci_resource_len(pdev, 1);
+		fifo_start = pci_resource_start(pdev, 2);
+		fifo_size = pci_resource_len(pdev, 2);
+
+		drm_info(&dev->drm,
+			 "FIFO at %pa size is %llu kiB\n",
+			 &fifo_start, (uint64_t)fifo_size / 1024);
+		dev->fifo_mem = devm_memremap(dev->drm.dev,
+					      fifo_start,
+					      fifo_size,
+					      MEMREMAP_WB);
+
+		if (IS_ERR(dev->fifo_mem)) {
+			drm_err(&dev->drm,
+				  "Failed mapping FIFO memory.\n");
+			pci_release_regions(pdev);
+			return PTR_ERR(dev->fifo_mem);
+		}
+	} else {
+		pci_release_regions(pdev);
+		return -EINVAL;
+	}
+
+	/*
+	 * This is approximate size of the vram, the exact size will only
+	 * be known after we read SVGA_REG_VRAM_SIZE. The PCI resource
+	 * size will be equal to or bigger than the size reported by
+	 * SVGA_REG_VRAM_SIZE.
+	 */
+	drm_info(&dev->drm,
+		 "VRAM at %pa size is %llu kiB\n",
+		 &dev->vram_start, (uint64_t)dev->vram_size / 1024);
+
+	return 0;
+}
+#endif /* CONFIG_IGEL_VMWGFX_FIX */
+
+
 static int vmw_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct vmw_private *vmw;
 	int ret;
 
+#ifndef CONFIG_IGEL_VMWGFX_FIX
 	ret = drm_aperture_remove_conflicting_pci_framebuffers(pdev, &driver);
 	if (ret)
 		goto out_error;
+#endif
 
 	ret = pcim_enable_device(pdev);
 	if (ret)
