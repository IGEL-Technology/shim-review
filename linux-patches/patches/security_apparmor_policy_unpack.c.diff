diff -Naurp a/linux-6.6.38.igel/security/apparmor/policy_unpack.c b/linux-6.6.38.igel/security/apparmor/policy_unpack.c
--- a/linux-6.6.38.igel/security/apparmor/policy_unpack.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/security/apparmor/policy_unpack.c	2024-08-02 15:41:31.571491967 +0200
@@ -270,6 +270,21 @@ fail:
 	return false;
 }
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static bool unpack_u16(struct aa_ext *e, u16 *data, const char *name)
+{
+	if (unpack_nameX(e, AA_U16, name)) {
+		if (!inbounds(e, sizeof(u16)))
+			return 0;
+		if (data)
+			*data = le16_to_cpu(get_unaligned((__le16 *) e->pos));
+		e->pos += sizeof(u16);
+		return 1;
+	}
+	return 0;
+}
+#endif
+
 VISIBLE_IF_KUNIT bool aa_unpack_u32(struct aa_ext *e, u32 *data, const char *name)
 {
 	void *pos = e->pos;
@@ -805,7 +820,11 @@ static struct aa_profile *unpack_profile
 	struct aa_profile *profile = NULL;
 	const char *tmpname, *tmpns = NULL, *name = NULL;
 	const char *info = "failed to unpack profile";
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	size_t size = 0, ns_len;
+#else
 	size_t ns_len;
+#endif
 	struct rhashtable_params params = { 0 };
 	char *key = NULL, *disconnected = NULL;
 	struct aa_data *data;
@@ -977,6 +996,44 @@ static struct aa_profile *unpack_profile
 		goto fail;
 	}
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	size = unpack_array(e, "net_allowed_af");
+	if (size || VERSION_LT(e->version, v8)) {
+		profile->net_compat = kzalloc(sizeof(struct aa_net_compat), GFP_KERNEL);
+		if (!profile->net_compat) {
+			info = "out of memory";
+			goto fail;
+		}
+		for (i = 0; i < size; i++) {
+			/* discard extraneous rules that this kernel will
+			 * never request
+			 */
+			if (i >= AF_MAX) {
+				u16 tmp;
+
+				if (!unpack_u16(e, &tmp, NULL) ||
+				    !unpack_u16(e, &tmp, NULL) ||
+				    !unpack_u16(e, &tmp, NULL))
+					goto fail;
+				continue;
+			}
+			if (!unpack_u16(e, &profile->net_compat->allow[i], NULL))
+				goto fail;
+			if (!unpack_u16(e, &profile->net_compat->audit[i], NULL))
+				goto fail;
+			if (!unpack_u16(e, &profile->net_compat->quiet[i], NULL))
+				goto fail;
+		}
+		if (size && !aa_unpack_nameX(e, AA_ARRAYEND, NULL))
+			goto fail;
+		if (VERSION_LT(e->version, v7)) {
+			/* pre v7 policy always allowed these */
+			profile->net_compat->allow[AF_UNIX] = 0xffff;
+			profile->net_compat->allow[AF_NETLINK] = 0xffff;
+		}
+	}
+#endif
+
 	if (aa_unpack_nameX(e, AA_STRUCT, "policydb")) {
 		/* generic policy dfa - optional and may be NULL */
 		info = "failed to unpack policydb";
