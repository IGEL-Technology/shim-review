diff -Naurp a/linux-6.6.38.igel/drivers/idle/intel_idle.c b/linux-6.6.38.igel/drivers/idle/intel_idle.c
--- a/linux-6.6.38.igel/drivers/idle/intel_idle.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/drivers/idle/intel_idle.c	2024-08-02 15:41:31.551491490 +0200
@@ -51,6 +51,9 @@
 #include <linux/notifier.h>
 #include <linux/cpu.h>
 #include <linux/moduleparam.h>
+#ifdef CONFIG_IGEL_FIX_OLD_BIOS_CPU_STEPPING
+#include <linux/dmi.h>
+#endif
 #include <asm/cpu_device_id.h>
 #include <asm/intel-family.h>
 #include <asm/nospec-branch.h>
@@ -320,7 +323,13 @@ static struct cpuidle_state byt_cstates[
 	{
 		.name = "C6N",
 		.desc = "MWAIT 0x58",
+#ifdef CONFIG_IGEL_LIMIT_BAYTRAIL_C_STATES
+		/* gottwald@igel.com Try to fix j1900 freezes
+		 * Patch taken from: https://bugzilla.kernel.org/show_bug.cgi?id=109051#c865 */
+		.flags = MWAIT2flg(0x58) | CPUIDLE_FLAG_TLB_FLUSHED | CPUIDLE_FLAG_UNUSABLE,
+#else
 		.flags = MWAIT2flg(0x58) | CPUIDLE_FLAG_TLB_FLUSHED,
+#endif
 		.exit_latency = 300,
 		.target_residency = 275,
 		.enter = &intel_idle,
@@ -328,7 +337,13 @@ static struct cpuidle_state byt_cstates[
 	{
 		.name = "C6S",
 		.desc = "MWAIT 0x52",
+#ifdef CONFIG_IGEL_LIMIT_BAYTRAIL_C_STATES
+		/* gottwald@igel.com Try to fix j1900 freezes
+		 * Patch taken from: https://bugzilla.kernel.org/show_bug.cgi?id=109051#c865 */
+		.flags = MWAIT2flg(0x52) | CPUIDLE_FLAG_TLB_FLUSHED | CPUIDLE_FLAG_UNUSABLE,
+#else
 		.flags = MWAIT2flg(0x52) | CPUIDLE_FLAG_TLB_FLUSHED,
+#endif
 		.exit_latency = 500,
 		.target_residency = 560,
 		.enter = &intel_idle,
@@ -2078,6 +2093,19 @@ static int __init intel_idle_init(void)
 			return -ENODEV;
 	}
 
+#ifdef CONFIG_IGEL_FIX_OLD_BIOS_CPU_STEPPING
+	if (max_cstate == CPUIDLE_STATE_MAX - 1) {
+		if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL &&
+		    boot_cpu_data.x86 ==  6 &&
+		    boot_cpu_data.x86_model == 0x37 &&
+		    boot_cpu_data.x86_stepping == 0x9) {
+			int year, month, day;
+			dmi_get_date(DMI_BIOS_DATE, &year, &month, &day);
+			if (year < 2018 || (year == 2018 && month < 11))
+				max_cstate = 1;
+		}
+	}
+#endif
 	if (boot_cpu_data.cpuid_level < CPUID_MWAIT_LEAF)
 		return -ENODEV;
 
