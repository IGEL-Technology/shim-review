diff -Naurp a/linux-6.6.38.igel/security/integrity/ima/ima_policy.c b/linux-6.6.38.igel/security/integrity/ima/ima_policy.c
--- a/linux-6.6.38.igel/security/integrity/ima/ima_policy.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/security/integrity/ima/ima_policy.c	2024-08-02 15:41:31.571491967 +0200
@@ -114,7 +114,11 @@ struct ima_rule_entry {
 	int pcr;
 	unsigned int allowed_algos; /* bitfield of allowed hash algorithms */
 	struct {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		void *rules[LSMBLOB_ENTRIES]; /* LSM file metadata specific */
+#else
 		void *rule;	/* LSM file metadata specific */
+#endif
 		char *args_p;	/* audit value */
 		int type;	/* audit type */
 	} lsm[MAX_LSM_RULES];
@@ -124,6 +128,24 @@ struct ima_rule_entry {
 	struct ima_template_desc *template;
 };
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+/**
+ * ima_lsm_isset - Is a rule set for any of the active security modules
+ * @rules: The set of IMA rules to check.
+ *
+ * If a rule is set for any LSM return true, otherwise return false.
+ */
+static inline bool ima_lsm_isset(void *rules[])
+{
+	int i;
+
+	for (i = 0; i < LSMBLOB_ENTRIES; i++)
+		if (rules[i])
+			return true;
+	return false;
+}
+#endif
+
 /*
  * sanity check in case the kernels gains more hash algorithms that can
  * fit in an unsigned int
@@ -378,9 +400,17 @@ static void ima_free_rule_opt_list(struc
 static void ima_lsm_free_rule(struct ima_rule_entry *entry)
 {
 	int i;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	int r;
+#endif
 
 	for (i = 0; i < MAX_LSM_RULES; i++) {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		for (r = 0; r < LSMBLOB_ENTRIES; r++)
+			ima_filter_rule_free(entry->lsm[i].rules);
+#else
 		ima_filter_rule_free(entry->lsm[i].rule);
+#endif
 		kfree(entry->lsm[i].args_p);
 	}
 }
@@ -423,10 +453,17 @@ static struct ima_rule_entry *ima_lsm_co
 		nentry->lsm[i].type = entry->lsm[i].type;
 		nentry->lsm[i].args_p = entry->lsm[i].args_p;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		ima_filter_rule_init(nentry->lsm[i].type, Audit_equal,
+				     nentry->lsm[i].args_p,
+				     &nentry->lsm[i].rules[0]);
+		if (!ima_lsm_isset(nentry->lsm[i].rules))
+#else
 		ima_filter_rule_init(nentry->lsm[i].type, Audit_equal,
 				     nentry->lsm[i].args_p,
 				     &nentry->lsm[i].rule);
 		if (!nentry->lsm[i].rule)
+#endif
 			pr_warn("rule for LSM \'%s\' is undefined\n",
 				nentry->lsm[i].args_p);
 	}
@@ -635,7 +672,11 @@ static bool ima_match_rules(struct ima_r
 		int rc = 0;
 		u32 osid;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		if (!ima_lsm_isset(lsm_rule->lsm[i].rules)) {
+#else
 		if (!lsm_rule->lsm[i].rule) {
+#endif
 			if (!lsm_rule->lsm[i].args_p)
 				continue;
 			else
@@ -648,16 +689,28 @@ retry:
 		case LSM_OBJ_ROLE:
 		case LSM_OBJ_TYPE:
 			security_inode_getsecid(inode, &osid);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+			rc = ima_filter_rule_match(osid, lsm_rule->lsm[i].type,
+						   Audit_equal,
+						   lsm_rule->lsm[i].rules);
+#else
 			rc = ima_filter_rule_match(osid, lsm_rule->lsm[i].type,
 						   Audit_equal,
 						   lsm_rule->lsm[i].rule);
+#endif
 			break;
 		case LSM_SUBJ_USER:
 		case LSM_SUBJ_ROLE:
 		case LSM_SUBJ_TYPE:
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+			rc = ima_filter_rule_match(secid, lsm_rule->lsm[i].type,
+						   Audit_equal,
+						   lsm_rule->lsm[i].rules);
+#else
 			rc = ima_filter_rule_match(secid, lsm_rule->lsm[i].type,
 						   Audit_equal,
 						   lsm_rule->lsm[i].rule);
+#endif
 			break;
 		default:
 			break;
@@ -1130,7 +1183,11 @@ static int ima_lsm_rule_init(struct ima_
 {
 	int result;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	if (ima_lsm_isset(entry->lsm[lsm_rule].rules))
+#else
 	if (entry->lsm[lsm_rule].rule)
+#endif
 		return -EINVAL;
 
 	entry->lsm[lsm_rule].args_p = match_strdup(args);
@@ -1138,10 +1195,17 @@ static int ima_lsm_rule_init(struct ima_
 		return -ENOMEM;
 
 	entry->lsm[lsm_rule].type = audit_type;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	result = ima_filter_rule_init(entry->lsm[lsm_rule].type, Audit_equal,
+				      entry->lsm[lsm_rule].args_p,
+				      &entry->lsm[lsm_rule].rules[0]);
+	if (!ima_lsm_isset(entry->lsm[lsm_rule].rules)) {
+#else
 	result = ima_filter_rule_init(entry->lsm[lsm_rule].type, Audit_equal,
 				      entry->lsm[lsm_rule].args_p,
 				      &entry->lsm[lsm_rule].rule);
 	if (!entry->lsm[lsm_rule].rule) {
+#endif
 		pr_warn("rule for LSM \'%s\' is undefined\n",
 			entry->lsm[lsm_rule].args_p);
 
@@ -2224,7 +2288,11 @@ int ima_policy_show(struct seq_file *m,
 	}
 
 	for (i = 0; i < MAX_LSM_RULES; i++) {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		if (ima_lsm_isset(entry->lsm[i].rules)) {
+#else
 		if (entry->lsm[i].rule) {
+#endif
 			switch (i) {
 			case LSM_OBJ_USER:
 				seq_printf(m, pt(Opt_obj_user),
