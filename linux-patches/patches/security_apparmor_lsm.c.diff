diff -Naurp a/linux-6.6.38.igel/security/apparmor/lsm.c b/linux-6.6.38.igel/security/apparmor/lsm.c
--- a/linux-6.6.38.igel/security/apparmor/lsm.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/security/apparmor/lsm.c	2024-08-02 15:41:31.571491967 +0200
@@ -25,6 +25,9 @@
 #include <net/sock.h>
 #include <uapi/linux/mount.h>
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+#include "include/af_unix.h"
+#endif
 #include "include/apparmor.h"
 #include "include/apparmorfs.h"
 #include "include/audit.h"
@@ -668,6 +671,9 @@ static int apparmor_getprocattr(struct t
 	const struct cred *cred = get_task_cred(task);
 	struct aa_task_ctx *ctx = task_ctx(current);
 	struct aa_label *label = NULL;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	bool newline = true;
+#endif
 
 	if (strcmp(name, "current") == 0)
 		label = aa_get_newest_label(cred_label(cred));
@@ -675,11 +681,22 @@ static int apparmor_getprocattr(struct t
 		label = aa_get_newest_label(ctx->previous);
 	else if (strcmp(name, "exec") == 0 && ctx->onexec)
 		label = aa_get_newest_label(ctx->onexec);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	else if (strcmp(name, "context") == 0) {
+		label = aa_get_newest_label(cred_label(cred));
+		newline = false;
+	} else
+#else
 	else
+#endif
 		error = -EINVAL;
 
 	if (label)
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		error = aa_getprocattr(label, value, newline);
+#else
 		error = aa_getprocattr(label, value);
+#endif
 
 	aa_put_label(label);
 	put_cred(cred);
@@ -687,6 +704,26 @@ static int apparmor_getprocattr(struct t
 	return error;
 }
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static int profile_display_lsm(struct aa_profile *profile,
+			       struct common_audit_data *sa)
+{
+	struct aa_perms perms = { };
+	unsigned int state;
+
+	state = PROFILE_MEDIATES(profile, AA_CLASS_DISPLAY_LSM);
+	if (state) {
+		aa_compute_perms(profile->policy.dfa, state, &perms);
+		aa_apply_modes_to_perms(profile, &perms);
+		aad(sa)->label = &profile->label;
+
+		return aa_check_perms(profile, &perms, AA_MAY_WRITE, sa, NULL);
+	}
+
+	return 0;
+}
+#endif
+
 static int apparmor_setprocattr(const char *name, void *value,
 				size_t size)
 {
@@ -699,6 +736,21 @@ static int apparmor_setprocattr(const ch
 	if (size == 0)
 		return -EINVAL;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	/* LSM infrastructure does actual setting of display if allowed */
+	if (!strcmp(name, "display")) {
+		struct aa_profile *profile;
+		struct aa_label *label;
+
+		aad(&sa)->info = "set display lsm";
+		label = begin_current_label_crit_section();
+		error = fn_for_each_confined(label, profile,
+					     profile_display_lsm(profile, &sa));
+		end_current_label_crit_section(label);
+		return error;
+	}
+#endif
+
 	/* AppArmor requires that the buffer must be null terminated atm */
 	if (args[size - 1] != '\0') {
 		/* null terminate */
@@ -850,6 +902,7 @@ static int apparmor_task_kill(struct tas
 	return error;
 }
 
+#ifndef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
 /**
  * apparmor_sk_alloc_security - allocate and attach the sk_security field
  */
@@ -865,18 +918,27 @@ static int apparmor_sk_alloc_security(st
 
 	return 0;
 }
+#endif
 
 /**
  * apparmor_sk_free_security - free the sk_security field
  */
 static void apparmor_sk_free_security(struct sock *sk)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+
+	aa_put_label(ctx->label);
+	aa_put_label(ctx->peer);
+	path_put(&ctx->path);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
 
 	SK_CTX(sk) = NULL;
 	aa_put_label(ctx->label);
 	aa_put_label(ctx->peer);
 	kfree(ctx);
+#endif
 }
 
 /**
@@ -885,8 +947,13 @@ static void apparmor_sk_free_security(st
 static void apparmor_sk_clone_security(const struct sock *sk,
 				       struct sock *newsk)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+	struct aa_sk_ctx *new = aa_sock(newsk);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
 	struct aa_sk_ctx *new = SK_CTX(newsk);
+#endif
 
 	if (new->label)
 		aa_put_label(new->label);
@@ -895,9 +962,106 @@ static void apparmor_sk_clone_security(c
 	if (new->peer)
 		aa_put_label(new->peer);
 	new->peer = aa_get_label(ctx->peer);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	new->path = ctx->path;
+	path_get(&new->path);
+#endif
+}
+
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static struct path *UNIX_FS_CONN_PATH(struct sock *sk, struct sock *newsk)
+{
+	if (sk->sk_family == PF_UNIX && UNIX_FS(sk))
+		return &unix_sk(sk)->path;
+	else if (newsk->sk_family == PF_UNIX && UNIX_FS(newsk))
+		return &unix_sk(newsk)->path;
+	return NULL;
+}
+
+/**
+ * apparmor_unix_stream_connect - check perms before making unix domain conn
+ *
+ * peer is locked when this hook is called
+ */
+static int apparmor_unix_stream_connect(struct sock *sk, struct sock *peer_sk,
+					struct sock *newsk)
+{
+	struct aa_sk_ctx *sk_ctx = aa_sock(sk);
+	struct aa_sk_ctx *peer_ctx = aa_sock(peer_sk);
+	struct aa_sk_ctx *new_ctx = aa_sock(newsk);
+	struct aa_label *label;
+	struct path *path;
+	int error;
+
+	label = __begin_current_label_crit_section();
+	error = aa_unix_peer_perm(label, OP_CONNECT,
+				(AA_MAY_CONNECT | AA_MAY_SEND | AA_MAY_RECEIVE),
+				  sk, peer_sk, NULL);
+	if (!UNIX_FS(peer_sk)) {
+		last_error(error,
+			aa_unix_peer_perm(peer_ctx->label, OP_CONNECT,
+				(AA_MAY_ACCEPT | AA_MAY_SEND | AA_MAY_RECEIVE),
+				peer_sk, sk, label));
+	}
+	__end_current_label_crit_section(label);
+
+	if (error)
+		return error;
+
+	/* label newsk if it wasn't labeled in post_create. Normally this
+	 * would be done in sock_graft, but because we are directly looking
+	 * at the peer_sk to obtain peer_labeling for unix socks this
+	 * does not work
+	 */
+	if (!new_ctx->label)
+		new_ctx->label = aa_get_label(peer_ctx->label);
+
+	/* Cross reference the peer labels for SO_PEERSEC */
+	if (new_ctx->peer)
+		aa_put_label(new_ctx->peer);
+
+	if (sk_ctx->peer)
+		aa_put_label(sk_ctx->peer);
+
+	new_ctx->peer = aa_get_label(sk_ctx->label);
+	sk_ctx->peer = aa_get_label(peer_ctx->label);
+
+	path = UNIX_FS_CONN_PATH(sk, peer_sk);
+	if (path) {
+		new_ctx->path = *path;
+		sk_ctx->path = *path;
+		path_get(path);
+		path_get(path);
+	}
+	return 0;
 }
 
 /**
+ * apparmor_unix_may_send - check perms before conn or sending unix dgrams
+ *
+ * other is locked when this hook is called
+ *
+ * dgram connect calls may_send, peer setup but path not copied?????
+ */
+static int apparmor_unix_may_send(struct socket *sock, struct socket *peer)
+{
+	struct aa_sk_ctx *peer_ctx = aa_sock(peer->sk);
+	struct aa_label *label;
+	int error;
+
+	label = __begin_current_label_crit_section();
+	error = xcheck(aa_unix_peer_perm(label, OP_SENDMSG, AA_MAY_SEND,
+					 sock->sk, peer->sk, NULL),
+		       aa_unix_peer_perm(peer_ctx->label, OP_SENDMSG,
+					 AA_MAY_RECEIVE,
+					 peer->sk, sock->sk, label));
+	__end_current_label_crit_section(label);
+
+	return error;
+}
+#endif
+
+/**
  * apparmor_socket_create - check perms before creating a new socket
  */
 static int apparmor_socket_create(int family, int type, int protocol, int kern)
@@ -940,7 +1104,11 @@ static int apparmor_socket_post_create(s
 		label = aa_get_current_label();
 
 	if (sock->sk) {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		struct aa_sk_ctx *ctx = aa_sock(sock->sk);
+#else
 		struct aa_sk_ctx *ctx = SK_CTX(sock->sk);
+#endif
 
 		aa_put_label(ctx->label);
 		ctx->label = aa_get_label(label);
@@ -1125,7 +1293,11 @@ static int apparmor_socket_shutdown(stru
  */
 static int apparmor_socket_sock_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
+#endif
 
 	if (!skb->secmark)
 		return 0;
@@ -1138,12 +1310,37 @@ static int apparmor_socket_sock_rcv_skb(
 
 static struct aa_label *sk_peer_label(struct sock *sk)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct sock *peer_sk;
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+	struct aa_label *label = ERR_PTR(-ENOPROTOOPT);
+
+	if (ctx->peer)
+		return aa_get_label(ctx->peer);
+
+	if (sk->sk_family != PF_UNIX)
+		return ERR_PTR(-ENOPROTOOPT);
+
+	/* check for sockpair peering which does not go through
+	 * security_unix_stream_connect
+	 */
+	peer_sk = unix_peer_get(sk);
+	if (peer_sk) {
+		ctx = aa_sock(peer_sk);
+		if (ctx->label)
+			label = aa_get_label(ctx->label);
+		sock_put(peer_sk);
+	}
+
+	return label;
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
 
 	if (ctx->peer)
 		return ctx->peer;
 
 	return ERR_PTR(-ENOPROTOOPT);
+#endif
 }
 
 /**
@@ -1181,6 +1378,10 @@ static int apparmor_socket_getpeersec_st
 
 	if (copy_to_sockptr(optval, name, slen))
 		error = -EFAULT;
+
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	aa_put_label(peer);
+#endif
 done_len:
 	if (copy_to_sockptr(optlen, &slen, sizeof(slen)))
 		error = -EFAULT;
@@ -1190,6 +1391,7 @@ done:
 	return error;
 }
 
+#ifndef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
 /**
  * apparmor_socket_getpeersec_dgram - get security label of packet
  * @sock: the peer socket
@@ -1205,6 +1407,7 @@ static int apparmor_socket_getpeersec_dg
 	/* TODO: requires secid support */
 	return -ENOPROTOOPT;
 }
+#endif
 
 /**
  * apparmor_sock_graft - Initialize newly created socket
@@ -1219,7 +1422,11 @@ static int apparmor_socket_getpeersec_dg
  */
 static void apparmor_sock_graft(struct sock *sk, struct socket *parent)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
+#endif
 
 	if (!ctx->label)
 		ctx->label = aa_get_current_label();
@@ -1229,7 +1436,11 @@ static void apparmor_sock_graft(struct s
 static int apparmor_inet_conn_request(const struct sock *sk, struct sk_buff *skb,
 				      struct request_sock *req)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct aa_sk_ctx *ctx = aa_sock(sk);
+#else
 	struct aa_sk_ctx *ctx = SK_CTX(sk);
+#endif
 
 	if (!skb->secmark)
 		return 0;
@@ -1246,8 +1457,18 @@ struct lsm_blob_sizes apparmor_blob_size
 	.lbs_cred = sizeof(struct aa_label *),
 	.lbs_file = sizeof(struct aa_file_ctx),
 	.lbs_task = sizeof(struct aa_task_ctx),
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	.lbs_sock = sizeof(struct aa_sk_ctx),
+#endif
 };
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static struct lsm_id apparmor_lsmid __lsm_ro_after_init = {
+	.lsm  = "apparmor",
+	.slot = LSMBLOB_NEEDED
+};
+#endif
+
 static struct security_hook_list apparmor_hooks[] __ro_after_init = {
 	LSM_HOOK_INIT(ptrace_access_check, apparmor_ptrace_access_check),
 	LSM_HOOK_INIT(ptrace_traceme, apparmor_ptrace_traceme),
@@ -1284,10 +1505,17 @@ static struct security_hook_list apparmo
 	LSM_HOOK_INIT(getprocattr, apparmor_getprocattr),
 	LSM_HOOK_INIT(setprocattr, apparmor_setprocattr),
 
+#ifndef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
 	LSM_HOOK_INIT(sk_alloc_security, apparmor_sk_alloc_security),
+#endif
 	LSM_HOOK_INIT(sk_free_security, apparmor_sk_free_security),
 	LSM_HOOK_INIT(sk_clone_security, apparmor_sk_clone_security),
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	LSM_HOOK_INIT(unix_stream_connect, apparmor_unix_stream_connect),
+	LSM_HOOK_INIT(unix_may_send, apparmor_unix_may_send),
+#endif
+
 	LSM_HOOK_INIT(socket_create, apparmor_socket_create),
 	LSM_HOOK_INIT(socket_post_create, apparmor_socket_post_create),
 	LSM_HOOK_INIT(socket_bind, apparmor_socket_bind),
@@ -1306,8 +1534,10 @@ static struct security_hook_list apparmo
 #endif
 	LSM_HOOK_INIT(socket_getpeersec_stream,
 		      apparmor_socket_getpeersec_stream),
+#ifndef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
 	LSM_HOOK_INIT(socket_getpeersec_dgram,
 		      apparmor_socket_getpeersec_dgram),
+#endif
 	LSM_HOOK_INIT(sock_graft, apparmor_sock_graft),
 #ifdef CONFIG_NETWORK_SECMARK
 	LSM_HOOK_INIT(inet_conn_request, apparmor_inet_conn_request),
@@ -1843,7 +2073,11 @@ static unsigned int apparmor_ip_postrout
 	if (sk == NULL)
 		return NF_ACCEPT;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	ctx = aa_sock(sk);
+#else
 	ctx = SK_CTX(sk);
+#endif
 	if (!apparmor_secmark_check(ctx->label, OP_SENDMSG, AA_MAY_SEND,
 				    skb->secmark, sk))
 		return NF_ACCEPT;
@@ -1937,8 +2171,13 @@ static int __init apparmor_init(void)
 		aa_free_root_ns();
 		goto buffers_out;
 	}
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	security_add_hooks(apparmor_hooks, ARRAY_SIZE(apparmor_hooks),
+				&apparmor_lsmid);
+#else
 	security_add_hooks(apparmor_hooks, ARRAY_SIZE(apparmor_hooks),
 				"apparmor");
+#endif
 
 	/* Report that AppArmor successfully initialized */
 	apparmor_initialized = 1;
@@ -1963,7 +2202,11 @@ alloc_out:
 
 DEFINE_LSM(apparmor) = {
 	.name = "apparmor",
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	.flags = LSM_FLAG_LEGACY_MAJOR,
+#else
 	.flags = LSM_FLAG_LEGACY_MAJOR | LSM_FLAG_EXCLUSIVE,
+#endif
 	.enabled = &apparmor_enabled,
 	.blobs = &apparmor_blob_sizes,
 	.init = apparmor_init,
