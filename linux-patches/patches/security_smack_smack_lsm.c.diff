diff -Naurp a/linux-6.6.38.igel/security/smack/smack_lsm.c b/linux-6.6.38.igel/security/smack/smack_lsm.c
--- a/linux-6.6.38.igel/security/smack/smack_lsm.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/security/smack/smack_lsm.c	2024-08-02 15:41:31.575492063 +0200
@@ -1572,7 +1572,11 @@ static int smack_inode_getsecurity(struc
 		if (sock == NULL || sock->sk == NULL)
 			return -EOPNOTSUPP;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		ssp = smack_sock(sock->sk);
+#else
 		ssp = sock->sk->sk_security;
+#endif
 
 		if (strcmp(name, XATTR_SMACK_IPIN) == 0)
 			isp = ssp->smk_in;
@@ -1960,7 +1964,11 @@ static int smack_file_receive(struct fil
 
 	if (inode->i_sb->s_magic == SOCKFS_MAGIC) {
 		sock = SOCKET_I(inode);
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		ssp = smack_sock(sock->sk);
+#else
 		ssp = sock->sk->sk_security;
+#endif
 		tsp = smack_cred(current_cred());
 		/*
 		 * If the receiving process can't write to the
@@ -2380,11 +2388,15 @@ static void smack_task_to_inode(struct t
 static int smack_sk_alloc_security(struct sock *sk, int family, gfp_t gfp_flags)
 {
 	struct smack_known *skp = smk_of_current();
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp;
 
 	ssp = kzalloc(sizeof(struct socket_smack), gfp_flags);
 	if (ssp == NULL)
 		return -ENOMEM;
+#endif
 
 	/*
 	 * Sockets created by kernel threads receive web label.
@@ -2398,11 +2410,38 @@ static int smack_sk_alloc_security(struc
 	}
 	ssp->smk_packet = NULL;
 
+#ifndef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
 	sk->sk_security = ssp;
+#endif
 
 	return 0;
 }
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+#ifdef SMACK_IPV6_PORT_LABELING
+/**
+ * smack_sk_free_security - Free a socket blob
+ * @sk: the socket
+ *
+ * Clears the blob pointer
+ */
+static void smack_sk_free_security(struct sock *sk)
+{
+	struct smk_port_label *spp;
+
+	if (sk->sk_family == PF_INET6) {
+		rcu_read_lock();
+		list_for_each_entry_rcu(spp, &smk_ipv6_port_list, list) {
+			if (spp->smk_sock != sk)
+				continue;
+			spp->smk_can_reuse = 1;
+			break;
+		}
+		rcu_read_unlock();
+	}
+}
+#endif
+#else /* CONFIG_IGEL_APPARMOR_DBUS_SUPPORT */
 /**
  * smack_sk_free_security - Free a socket blob
  * @sk: the socket
@@ -2427,6 +2466,7 @@ static void smack_sk_free_security(struc
 #endif
 	kfree(sk->sk_security);
 }
+#endif
 
 /**
  * smack_sk_clone_security - Copy security context
@@ -2554,7 +2594,11 @@ static struct smack_known *smack_ipv6hos
  */
 static int smack_netlbl_add(struct sock *sk)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct smack_known *skp = ssp->smk_out;
 	int rc;
 
@@ -2618,7 +2662,11 @@ static int smk_ipv4_check(struct sock *s
 	struct smack_known *skp;
 	int rc = 0;
 	struct smack_known *hkp;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct smk_audit_info ad;
 
 	rcu_read_lock();
@@ -2691,7 +2739,11 @@ static void smk_ipv6_port_label(struct s
 {
 	struct sock *sk = sock->sk;
 	struct sockaddr_in6 *addr6;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sock->sk);
+#else
 	struct socket_smack *ssp = sock->sk->sk_security;
+#endif
 	struct smk_port_label *spp;
 	unsigned short port = 0;
 
@@ -2779,7 +2831,11 @@ static int smk_ipv6_port_check(struct so
 				int act)
 {
 	struct smk_port_label *spp;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct smack_known *skp = NULL;
 	unsigned short port;
 	struct smack_known *object;
@@ -2882,7 +2938,11 @@ static int smack_inode_setsecurity(struc
 	if (sock == NULL || sock->sk == NULL)
 		return -EOPNOTSUPP;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	ssp = smack_sock(sock->sk);
+#else
 	ssp = sock->sk->sk_security;
+#endif
 
 	if (strcmp(name, XATTR_SMACK_IPIN) == 0)
 		ssp->smk_in = skp;
@@ -2930,7 +2990,11 @@ static int smack_socket_post_create(stru
 	 * Sockets created by kernel threads receive web label.
 	 */
 	if (unlikely(current->flags & PF_KTHREAD)) {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		ssp = smack_sock(sock->sk);
+#else
 		ssp = sock->sk->sk_security;
+#endif
 		ssp->smk_in = &smack_known_web;
 		ssp->smk_out = &smack_known_web;
 	}
@@ -2955,8 +3019,13 @@ static int smack_socket_post_create(stru
 static int smack_socket_socketpair(struct socket *socka,
 		                   struct socket *sockb)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *asp = smack_sock(socka->sk);
+	struct socket_smack *bsp = smack_sock(sockb->sk);
+#else
 	struct socket_smack *asp = socka->sk->sk_security;
 	struct socket_smack *bsp = sockb->sk->sk_security;
+#endif
 
 	asp->smk_packet = bsp->smk_out;
 	bsp->smk_packet = asp->smk_out;
@@ -3019,7 +3088,11 @@ static int smack_socket_connect(struct s
 		if (__is_defined(SMACK_IPV6_SECMARK_LABELING))
 			rsp = smack_ipv6host_label(sip);
 		if (rsp != NULL) {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+			struct socket_smack *ssp = smack_sock(sock->sk);
+#else
 			struct socket_smack *ssp = sock->sk->sk_security;
+#endif
 
 			rc = smk_ipv6_check(ssp->smk_out, rsp, sip,
 					    SMK_CONNECTING);
@@ -3651,7 +3724,11 @@ static int smack_getprocattr(struct task
 	char *cp;
 	int slen;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	if (strcmp(name, "current") != 0 && strcmp(name, "context") != 0)
+#else
 	if (strcmp(name, "current") != 0)
+#endif
 		return -EINVAL;
 
 	cp = kstrdup(skp->smk_known, GFP_KERNEL);
@@ -3682,6 +3759,15 @@ static int smack_setprocattr(const char
 	struct smack_known_list_elem *sklep;
 	int rc;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	/*
+	 * Allow the /proc/.../attr/current and SO_PEERSEC "display"
+	 * to be reset at will.
+	 */
+	if (strcmp(name, "display") == 0)
+		return 0;
+#endif
+
 	if (!smack_privileged(CAP_MAC_ADMIN) && list_empty(&tsp->smk_relabel))
 		return -EPERM;
 
@@ -3742,9 +3828,15 @@ static int smack_unix_stream_connect(str
 {
 	struct smack_known *skp;
 	struct smack_known *okp;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sock);
+	struct socket_smack *osp = smack_sock(other);
+	struct socket_smack *nsp = smack_sock(newsk);
+#else
 	struct socket_smack *ssp = sock->sk_security;
 	struct socket_smack *osp = other->sk_security;
 	struct socket_smack *nsp = newsk->sk_security;
+#endif
 	struct smk_audit_info ad;
 	int rc = 0;
 #ifdef CONFIG_AUDIT
@@ -3790,8 +3882,13 @@ static int smack_unix_stream_connect(str
  */
 static int smack_unix_may_send(struct socket *sock, struct socket *other)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sock->sk);
+	struct socket_smack *osp = smack_sock(other->sk);
+#else
 	struct socket_smack *ssp = sock->sk->sk_security;
 	struct socket_smack *osp = other->sk->sk_security;
+#endif
 	struct smk_audit_info ad;
 	int rc;
 
@@ -3828,7 +3925,11 @@ static int smack_socket_sendmsg(struct s
 	struct sockaddr_in6 *sap = (struct sockaddr_in6 *) msg->msg_name;
 #endif
 #ifdef SMACK_IPV6_SECMARK_LABELING
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sock->sk);
+#else
 	struct socket_smack *ssp = sock->sk->sk_security;
+#endif
 	struct smack_known *rsp;
 #endif
 	int rc = 0;
@@ -4062,7 +4163,11 @@ static struct smack_known *smack_from_ne
  */
 static int smack_socket_sock_rcv_skb(struct sock *sk, struct sk_buff *skb)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct smack_known *skp = NULL;
 	int rc = 0;
 	struct smk_audit_info ad;
@@ -4166,7 +4271,11 @@ static int smack_socket_getpeersec_strea
 	u32 slen = 1;
 	int rc = 0;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	ssp = smack_sock(sock->sk);
+#else
 	ssp = sock->sk->sk_security;
+#endif
 	if (ssp->smk_packet != NULL) {
 		rcp = ssp->smk_packet->smk_known;
 		slen = strlen(rcp) + 1;
@@ -4216,7 +4325,11 @@ static int smack_socket_getpeersec_dgram
 
 	switch (family) {
 	case PF_UNIX:
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+		ssp = smack_sock(sock->sk);
+#else
 		ssp = sock->sk->sk_security;
+#endif
 		s = ssp->smk_out->smk_secid;
 		break;
 	case PF_INET:
@@ -4265,7 +4378,11 @@ static void smack_sock_graft(struct sock
 	    (sk->sk_family != PF_INET && sk->sk_family != PF_INET6))
 		return;
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	ssp = smack_sock(sk);
+#else
 	ssp = sk->sk_security;
+#endif
 	ssp->smk_in = skp;
 	ssp->smk_out = skp;
 	/* cssp->smk_packet is already set in smack_inet_csk_clone() */
@@ -4285,7 +4402,11 @@ static int smack_inet_conn_request(const
 {
 	u16 family = sk->sk_family;
 	struct smack_known *skp;
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct sockaddr_in addr;
 	struct iphdr *hdr;
 	struct smack_known *hskp;
@@ -4371,7 +4492,11 @@ static int smack_inet_conn_request(const
 static void smack_inet_csk_clone(struct sock *sk,
 				 const struct request_sock *req)
 {
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	struct socket_smack *ssp = smack_sock(sk);
+#else
 	struct socket_smack *ssp = sk->sk_security;
+#endif
 	struct smack_known *skp;
 
 	if (req->peer_secid != 0) {
@@ -4940,9 +5065,19 @@ struct lsm_blob_sizes smack_blob_sizes _
 	.lbs_ipc = sizeof(struct smack_known *),
 	.lbs_msg_msg = sizeof(struct smack_known *),
 	.lbs_superblock = sizeof(struct superblock_smack),
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	.lbs_sock = sizeof(struct socket_smack),
+#endif
 	.lbs_xattr_count = SMACK_INODE_INIT_XATTRS,
 };
 
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+static struct lsm_id smack_lsmid __lsm_ro_after_init = {
+	.lsm  = "smack",
+	.slot = LSMBLOB_NEEDED
+};
+#endif
+
 static struct security_hook_list smack_hooks[] __ro_after_init = {
 	LSM_HOOK_INIT(ptrace_access_check, smack_ptrace_access_check),
 	LSM_HOOK_INIT(ptrace_traceme, smack_ptrace_traceme),
@@ -5055,7 +5190,13 @@ static struct security_hook_list smack_h
 	LSM_HOOK_INIT(socket_getpeersec_stream, smack_socket_getpeersec_stream),
 	LSM_HOOK_INIT(socket_getpeersec_dgram, smack_socket_getpeersec_dgram),
 	LSM_HOOK_INIT(sk_alloc_security, smack_sk_alloc_security),
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+#ifdef SMACK_IPV6_PORT_LABELING
 	LSM_HOOK_INIT(sk_free_security, smack_sk_free_security),
+#endif
+#else
+	LSM_HOOK_INIT(sk_free_security, smack_sk_free_security),
+#endif /* CONFIG_IGEL_APPARMOR_DBUS_SUPPORT */
 	LSM_HOOK_INIT(sk_clone_security, smack_sk_clone_security),
 	LSM_HOOK_INIT(sock_graft, smack_sock_graft),
 	LSM_HOOK_INIT(inet_conn_request, smack_inet_conn_request),
@@ -5151,7 +5292,11 @@ static __init int smack_init(void)
 	/*
 	 * Register with LSM
 	 */
+#ifdef CONFIG_IGEL_APPARMOR_DBUS_SUPPORT
+	security_add_hooks(smack_hooks, ARRAY_SIZE(smack_hooks), &smack_lsmid);
+#else
 	security_add_hooks(smack_hooks, ARRAY_SIZE(smack_hooks), "smack");
+#endif
 	smack_enabled = 1;
 
 	pr_info("Smack:  Initializing.\n");
