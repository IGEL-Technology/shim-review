diff -Naurp a/linux-6.6.38.igel/drivers/gpu/drm/i915/display/intel_dp.c b/linux-6.6.38.igel/drivers/gpu/drm/i915/display/intel_dp.c
--- a/linux-6.6.38.igel/drivers/gpu/drm/i915/display/intel_dp.c	2024-07-09 11:44:29.000000000 +0200
+++ b/linux-6.6.38.igel/drivers/gpu/drm/i915/display/intel_dp.c	2024-08-02 15:41:31.543491299 +0200
@@ -529,6 +529,12 @@ intel_dp_set_source_rates(struct intel_d
 	else if (vbt_max_rate)
 		max_rate = vbt_max_rate;
 
+#ifdef CONFIG_IGEL_I915_ADD_LIMIT_DP_RATE_OPTION
+	/* gottwald@igel.com : Added module parameter to limit max DP link rate */
+	if (i915_modparams.limit_dp_max_rate >= 162000 && (max_rate == 0 || max_rate > i915_modparams.limit_dp_max_rate))
+			max_rate = i915_modparams.limit_dp_max_rate;
+#endif
+
 	if (max_rate)
 		size = intel_dp_rate_limit_len(source_rates, size, max_rate);
 
@@ -1911,7 +1917,15 @@ bool intel_dp_limited_color_range(const
 		to_intel_digital_connector_state(conn_state);
 	const struct drm_display_mode *adjusted_mode =
 		&crtc_state->hw.adjusted_mode;
+#ifdef CONFIG_IGEL_I915_ADD_M250C_NO_LIMITED_COLOR_RANGE_OPTION
+	struct intel_connector *intel_connector =
+		to_intel_connector(conn_state->connector);
+	struct drm_connector *connector = &intel_connector->base;
 
+	/* gottwald@igel.com Ugly workaround for M250C colorspace problems on DP-1 connector */
+	if (strcmp("DP-1", connector->name) == 0 && i915_modparams.m250c_no_limited_color_range != 0)
+		return 0;
+#endif
 	/*
 	 * Our YCbCr output is always limited range.
 	 * crtc_state->limited_color_range only applies to RGB,
@@ -1945,6 +1959,12 @@ static bool intel_dp_port_has_audio(stru
 	if (DISPLAY_VER(dev_priv) < 12 && port == PORT_A)
 		return false;
 
+#ifdef CONFIG_IGEL_I915_ADD_DISABLE_DP_AUDIO_OPTION
+        if (i915_modparams.disable_dp_audio) {
+                return false;
+        }
+#endif
+
 	return true;
 }
 
@@ -2277,9 +2297,19 @@ intel_dp_compute_config(struct intel_enc
 	if (HAS_PCH_SPLIT(dev_priv) && !HAS_DDI(dev_priv) && encoder->port != PORT_A)
 		pipe_config->has_pch_encoder = true;
 
+#ifdef CONFIG_IGEL_I915_ADD_DISABLE_DP_AUDIO_OPTION
+	if (i915_modparams.disable_dp_audio) {
+		pipe_config->has_audio = false;
+	} else {
+		pipe_config->has_audio =
+			intel_dp_has_audio(encoder, conn_state) &&
+			intel_audio_compute_config(encoder, pipe_config, conn_state);
+	}
+#else
 	pipe_config->has_audio =
 		intel_dp_has_audio(encoder, conn_state) &&
 		intel_audio_compute_config(encoder, pipe_config, conn_state);
+#endif
 
 	fixed_mode = intel_panel_fixed_mode(connector, adjusted_mode);
 	if (intel_dp_is_edp(intel_dp) && fixed_mode) {
@@ -4844,6 +4874,18 @@ intel_dp_set_edid(struct intel_dp *intel
 
 	/* FIXME: Get rid of drm_edid_raw() */
 	edid = drm_edid_raw(drm_edid);
+	if (edid && edid->input & DRM_EDID_INPUT_DIGITAL) {
+
+#ifdef CONFIG_IGEL_I915_ADD_DISABLE_DP_AUDIO_OPTION
+		if (i915_modparams.disable_dp_audio) {
+			connector->base.display_info.has_audio = false;
+		} else {
+			connector->base.display_info.has_audio = drm_detect_monitor_audio(edid);
+		}
+#else
+		connector->base.display_info.has_audio = drm_detect_monitor_audio(edid);
+#endif
+	}
 
 	drm_dp_cec_set_edid(&intel_dp->aux, edid);
 }
@@ -4891,12 +4933,34 @@ intel_dp_detect(struct drm_connector *co
 		return connector_status_disconnected;
 
 	/* Can't disconnect eDP */
+#ifdef CONFIG_IGEL_I915_DP_DETECT_WORKAROUND
+	if (intel_dp_is_edp(intel_dp)) {
+		status = edp_detect(intel_dp);
+	} else {
+		/* gottwald@igel.com some monitors (Samsung U28D590D) took some time after
+		 * a DPMS OFF/ON event before ibx_digital_port_connected is working again.
+		 * The detect workaround is set if the DP link train was sucessful.
+		 * So if detect_workaround is set and detect_workaround_timestamp is less
+		 * then 900 ms from now do not use ibx_digital_port_connected result
+		 */
+
+		if (intel_digital_port_connected(encoder))
+			status = intel_dp_detect_dpcd(intel_dp);
+		else if (intel_dp->detect_workaround == true &&
+			 ktime_to_ms(ktime_sub(ktime_get(), intel_dp->detect_workaround_timestamp)) <= 900)
+			status = intel_dp_detect_dpcd(intel_dp);
+		else
+			status = connector_status_disconnected;
+	}
+	intel_dp->detect_workaround = false;
+#else
 	if (intel_dp_is_edp(intel_dp))
 		status = edp_detect(intel_dp);
 	else if (intel_digital_port_connected(encoder))
 		status = intel_dp_detect_dpcd(intel_dp);
 	else
 		status = connector_status_disconnected;
+#endif /* CONFIG_IGEL_I915_DP_DETECT_WORKAROUND */
 
 	if (status == connector_status_disconnected) {
 		memset(&intel_dp->compliance, 0, sizeof(intel_dp->compliance));
@@ -5353,6 +5417,11 @@ static bool _intel_dp_is_port_edp(struct
 	if (DISPLAY_VER(dev_priv) < 5)
 		return false;
 
+#ifdef CONFIG_IGEL_I915_EDP_IS_DP_MODULE_OPTION
+	if (i915_modparams.edp_is_dp == 1)
+		return false;
+#endif
+
 	if (DISPLAY_VER(dev_priv) < 9 && port == PORT_A)
 		return true;
 
@@ -5726,6 +5795,12 @@ intel_dp_init_connector(struct intel_dig
 	else
 		intel_connector->get_hw_state = intel_connector_get_hw_state;
 
+#ifdef CONFIG_IGEL_I915_DP_DETECT_WORKAROUND
+	/* gottwald@igel.com init dp detect workaround */
+
+	intel_dp->detect_workaround = false;
+	intel_dp->detect_workaround_timestamp = ktime_get();
+#endif
 	if (!intel_edp_init_connector(intel_dp, intel_connector)) {
 		intel_dp_aux_fini(intel_dp);
 		goto fail;
